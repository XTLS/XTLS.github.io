import{_ as i,r as n,o as r,c as s,a as e,b as t,d as a,e as h}from"./app-DkijezZx.js";const o={},p=t("h1",{id:"mkcp-协议",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#mkcp-协议"},[t("span",null,"mKCP 协议")])],-1),c={href:"https://github.com/skywind3000/kcp",target:"_blank",rel:"noopener noreferrer"},b=h('<h2 id="版本" tabindex="-1"><a class="header-anchor" href="#版本"><span>版本</span></a></h2><p>mKCP 没有版本号，不保证版本之间兼容性。</p><h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖"><span>依赖</span></a></h2><h3 id="底层协议" tabindex="-1"><a class="header-anchor" href="#底层协议"><span>底层协议</span></a></h3><p>mKCP 是一个基于 UDP 的协议，所有通讯使用 UDP 传输。</p><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h3>',6),_={href:"https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function",target:"_blank",rel:"noopener noreferrer"},m=t("ul",null,[t("li",null,"输入参数为任意长度的字符串；"),t("li",null,"输入出一个 32 位无符号整数；")],-1),u=h('<h2 id="通讯过程" tabindex="-1"><a class="header-anchor" href="#通讯过程"><span>通讯过程</span></a></h2><ol><li>mKCP 将数据流拆成若干个数据包进行发送。一个数据流有一个唯一标识，用以区分不同的数据流。数据流中的每一个数据包都携带了同样的标识。</li><li>mKCP 没有握手过程，当收到一个数据包时，根据其携带的数据流的标识来判断是否为新的通话，或是正在进行中的通话。</li><li>每一个数据包中包含若干个片段（Segment），片段分为三类：数据（Data）、确认（ACK）、心跳（Ping）。每个片段需要单独处理。</li></ol><h2 id="数据格式" tabindex="-1"><a class="header-anchor" href="#数据格式"><span>数据格式</span></a></h2><h3 id="数据包" tabindex="-1"><a class="header-anchor" href="#数据包"><span>数据包</span></a></h3><table><thead><tr><th>4 字节</th><th>2 字节</th><th>L 字节</th></tr></thead><tbody><tr><td>认证信息 A</td><td>数据长度 L</td><td>片段部分</td></tr></tbody></table><p>其中：</p><ul><li>认证信息 A = fnv(片段部分），big endian；</li><li>片段部分可能包含多个片段；</li></ul><h3 id="数据片段" tabindex="-1"><a class="header-anchor" href="#数据片段"><span>数据片段</span></a></h3><table><thead><tr><th>2 字节</th><th>1 字节</th><th>1 字节</th><th>4 字节</th><th>4 字节</th><th>4 字节</th><th>2 字节</th><th>Len 字节</th></tr></thead><tbody><tr><td>标识 Conv</td><td>指令 Cmd</td><td>选项 Opt</td><td>时间戳 Ts</td><td>序列号 Sn</td><td>未确认序列号 Una</td><td>长度 Len</td><td>数据</td></tr></tbody></table><p>其中：</p><ul><li>标识 Conv: mKCP 数据流的标识</li><li>指令 Cmd: 常量 0x01</li><li>选项 Opt: 可选的值有： <ul><li>0x00: 空选项</li><li>0x01: 对方已发出所有数据</li></ul></li><li>时间戳 Ts: 当前片段从远端发送出来时的时间，big endian</li><li>序列号 Sn: 该数据片段时数据流中的位置，起始片段的序列号为 0，之后每个新片段按顺序加 1</li><li>未确认序列号 Una: 远端主机正在发送的，且尚未收到确认的最小的 Sn</li></ul><h3 id="确认片段" tabindex="-1"><a class="header-anchor" href="#确认片段"><span>确认片段</span></a></h3><table><thead><tr><th>2 字节</th><th>1 字节</th><th>1 字节</th><th>4 字节</th><th>4 字节</th><th>4 字节</th><th>2 字节</th><th>Len * 4 字节</th></tr></thead><tbody><tr><td>标识 Conv</td><td>指令 Cmd</td><td>选项 Opt</td><td>窗口 Wnd</td><td>下一接收序列号 Sn</td><td>时间戳 Ts</td><td>长度 Len</td><td>已收到的序列号</td></tr></tbody></table><p>其中：</p><ul><li>标识 Conv: mKCP 数据流的标识</li><li>指令 Cmd: 常量 0x00</li><li>选项 Opt: 同上</li><li>窗口 Wnd: 远端主机可以接收的最大序列号</li><li>下一接收序列号 Sn: 远端主机未收到的数据片段中的最小序列号</li><li>时间戳 Ts: 远端主机最新收到的数据片段的时间戳，可用于计算延迟</li><li>已收到的序列号: 每个 4 字节，表示此序列号的数据已经确认收到</li></ul><p>注释：</p><ul><li>远程主机期待收到序列号 [Sn, Wnd) 范围内的数据</li></ul><h3 id="心跳片段" tabindex="-1"><a class="header-anchor" href="#心跳片段"><span>心跳片段</span></a></h3><table><thead><tr><th>2 字节</th><th>1 字节</th><th>1 字节</th><th>4 字节</th><th>4 字节</th><th>4 字节</th></tr></thead><tbody><tr><td>标识 Conv</td><td>指令 Cmd</td><td>选项 Opt</td><td>未确认序列号 Una</td><td>下一接收序列号 Sn</td><td>延迟 Rto</td></tr></tbody></table><p>其中：</p><ul><li>标识 Conv: mKCP 数据流的标识</li><li>指令 Cmd: 可选的值有 <ul><li>0x02: 远端主机强行终止会话</li><li>0x03: 正常心跳</li></ul></li><li>选项 Opt: 同上</li><li>未确认序列号 Una: 同数据片段的 Una</li><li>下一接收序列号 Sn: 同确认片段的 Sn</li><li>延迟 Rto: 远端主机自己计算出的延迟</li></ul>',21);function f(C,x){const d=n("I18nTip"),l=n("ExternalLinkIcon");return r(),s("div",null,[e(d),p,t("p",null,[a("mKCP 是流式传输协议，由 "),t("a",c,[a("KCP 协议"),e(l)]),a(" 修改而来，可以按顺序传输任意的数据流。")]),b,t("ul",null,[t("li",null,[a("fnv: "),t("a",_,[a("FNV-1a"),e(l)]),a(" 哈希函数 "),m])]),u])}const P=i(o,[["render",f],["__file","mkcp.html.vue"]]);export{P as default};
