import{_ as p,r as t,o as r,c as l,a as s,b as e,d as n,w as d,e as o}from"./app-BZ3g7oE-.js";const u={},h=o('<h1 id="http-2" tabindex="-1"><a class="header-anchor" href="#http-2"><span>HTTP/2</span></a></h1><p>The transmission mode based on HTTP/2 fully implements the HTTP/2 standard and can be relayed by other HTTP servers (such as Nginx).</p><p>Based on the recommendations of HTTP/2, both the client and server must enable TLS to use this transmission mode normally.</p><p>HTTP/2 has built-in multiplexing, so it is not recommended to enable mux.cool when using HTTP/2.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>The current version of the transmission mode based on HTTP/2 does not require TLS configuration for inbound (server-side).</p><p>This makes it possible to use a plaintext HTTP/2 protocol called h2c for communication between the gateway and Xray, with external gateway components handling the TLS layer conversation in special-purpose load-balancing deployment environments.</p></div><div class="custom-container warning"><p class="custom-container-title">Warning</p><p>⚠️ If you are using fallback, please note the following:</p><ul><li>Please make sure that <code>h2</code> is included in <code>(x)tlsSettings.alpn</code>, otherwise HTTP/2 cannot complete TLS handshake.</li><li>HTTP/2 cannot perform path-based routing, so it is recommended to use SNI-based routing.</li></ul></div><h2 id="httpobject" tabindex="-1"><a class="header-anchor" href="#httpobject"><span>HttpObject</span></a></h2>',7),m=e("code",null,"HttpObject",-1),k=e("code",null,"httpSettings",-1),b=o(`<div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;host&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;xray.com&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/random/path&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;read_idle_timeout&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token property">&quot;health_check_timeout&quot;</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
  <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;PUT&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;headers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;Header&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>host</code>: [string]</p></blockquote><p>A string array, where each element is a domain name.</p><p>The client will randomly select a domain name from the list for communication, and the server will verify whether the domain name is in the list.</p><blockquote><p><code>path</code>: string</p></blockquote><p>The HTTP path starts with <code>/</code> and must be the same value between the client and server.</p><p>The default value is <code>/</code></p><blockquote><p><code>read_idle_timeout</code>: number</p></blockquote><p>The connection health check is performed when no data has been received for a certain period of time, measured in seconds.</p><p>By default, the health check is <strong>disabled</strong>.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Only need to be configured</strong> in <strong><code>outbound</code></strong> (<strong>client</strong>).</p></div><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>Enabling health checks may help solve some &quot;connection drop&quot; issues.</p></div><blockquote><p><code>health_check_timeout</code>: number</p></blockquote><p>The timeout for the health check, measured in seconds. If the health check is not completed within this time period, it is considered to have failed. The default value is <code>15</code></p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p><strong>Only need to be configured</strong> in <code>outbound</code> <strong>(client)</strong>.</p></div><blockquote><p><code>method</code>: string</p></blockquote><p>HTTP request method. The default value is <code>PUT</code></p>`,17),v={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods",target:"_blank",rel:"noopener noreferrer"},T=e("blockquote",null,[e("p",null,[e("code",null,"headers"),n(": map{ string: [string] }")])],-1),g=e("p",null,"Custom HTTP headers, defined as key-value pairs. Each key represents an HTTP header name and its corresponding value is an array.",-1);function _(f,q){const a=t("I18nTip"),i=t("RouterLink"),c=t("ExternalLinkIcon");return r(),l("div",null,[s(a),h,e("p",null,[m,n(" corresponds to the "),k,n(" in the "),s(i,{to:"/en/config/transport.html"},{default:d(()=>[n("Transport Protocol")]),_:1}),n(",")]),b,e("p",null,[n("Please refer this "),e("a",v,[n("this"),s(c)]),n(" when configure.")]),T,g])}const P=p(u,[["render",_],["__file","h2.html.vue"]]);export{P as default};
