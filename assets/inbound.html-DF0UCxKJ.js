import{_ as l,r as t,o as d,c as u,a as o,b as e,d as n,w as c,e as s}from"./app-DpBi3LNN.js";const h={},b=e("h1",{id:"inbound-proxy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inbound-proxy"},[e("span",null,"Inbound Proxy")])],-1),m=s(`<h2 id="inboundobject" tabindex="-1"><a class="header-anchor" href="#inboundobject"><span>InboundObject</span></a></h2><p>The <code>InboundObject</code> corresponds to a subelement of the <code>inbounds</code> item in the configuration file.</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;inbounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;listen&quot;</span><span class="token operator">:</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">1080</span><span class="token punctuation">,</span>
      <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;protocol_name&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;settings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;streamSettings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;identifier&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;sniffing&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;enabled&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;destOverride&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tls&quot;</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;allocate&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;strategy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;refresh&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
        <span class="token property">&quot;concurrency&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>listen</code>: address</p></blockquote><p>The listening address, either an IP address or a Unix domain socket. The default value is <code>&quot;0.0.0.0&quot;</code>, which means accepting connections on all network interfaces.</p><p>An available system IP address can be specified.</p>`,6),f=e("code",null,'"/dev/shm/domain.socket"',-1),k=e("code",null,"@",-1),q={href:"https://www.man7.org/linux/man-pages/man7/unix.7.html",target:"_blank",rel:"noopener noreferrer"},g=e("code",null,"@@",-1),v=s("<p>When Unix domain socket is specified, <code>port</code> and <code>allocate</code> will be ignored. The protocol currently supports VLESS, VMess, and Trojan. The transport methods available are TCP, WebSocket, HTTP/2, and gRPC.</p><p>When specifying a Unix domain socket, you can add a comma and an access permission indicator after the socket, such as <code>&quot;/dev/shm/domain.socket,0666&quot;</code>, to specify the access permission of the socket. This can be used to solve the socket access permission issue that occurs by default.</p><blockquote><p><code>port</code>: number | &quot;env:variable&quot; | string</p></blockquote><p>Port. The accepted formats are:</p><ul><li>Integer: the actual port number.</li><li>Environment variable: starts with <code>&quot;env:&quot;</code>, followed by the name of an environment variable, such as <code>&quot;env:PORT&quot;</code>. Xray will parse this environment variable as a string.</li><li>String: can be a numeric string, such as <code>&quot;1234&quot;</code>, or a range of port numbers, such as <code>&quot;5-10&quot;</code> which represents ports 5 through 10, a total of 6 ports. You can use commas to separate multiple ranges, such as <code>11,13,15-17</code>, which represents ports 11, 13, and 15 through 17, a total of 5 ports.</li></ul><p>When only one port is specified, Xray listens for inbound connections on that port. When a range of ports is specified, it depends on the <code>allocate</code> setting.</p><blockquote><p><code>protocol</code>: string</p></blockquote>",7),y=e("blockquote",null,[e("p",null,[e("code",null,"settings"),n(": InboundConfigurationObject")])],-1),_=e("p",null,[n("The specific configuration content depends on the protocol. See "),e("code",null,"InboundConfigurationObject"),n(" in each protocol for details.")],-1),w=e("code",null,"streamSettings",-1),T=s(`<p>The underlying transport method is how the current Xray node interfaces with other nodes.</p><blockquote><p><code>tag</code>: string</p><p>The identifier of this inbound connection, used to locate this connection in other configurations.</p></blockquote><div class="custom-container danger"><p class="custom-container-title">Danger</p><p>When it is not empty, its value must be <strong>unique</strong> among all <code>tag</code>s.</p></div><blockquote><p><code>sniffing</code>: <a href="#sniffingobject">SniffingObject</a></p></blockquote><p>Traffic sniffing is mainly used in transparent proxies, for example:</p><ol><li>If a device wants to access <code>abc.com</code> while connected to the internet, it will first query the IP address of <code>abc.com</code> via DNS and get <code>1.2.3.4</code>. Then the device will initiate a connection to <code>1.2.3.4</code>.</li><li>If sniffing is not set up, Xray will receive a connection request for <code>1.2.3.4</code>, which cannot be used for routing based on domain rules.</li><li>When <code>enable</code> in <code>sniffing</code> is set to <code>true</code>, Xray will sniff the domain name, <code>abc.com</code>, from the traffic data when processing the traffic of this connection.</li><li>Xray will reset <code>1.2.3.4</code> to <code>abc.com</code>. Routing can then be based on domain rules.</li></ol><p>Since the connection is now to <code>abc.com</code>, more can be done, such as routing based on domain rules, and even re-resolving the DNS.</p><p>When <code>enable</code> in <code>sniffing</code> is set to <code>true</code>, it can also sniff out bittorrent traffic and then configure the &quot;protocol&quot; item in routing rules to handle bittorrent traffic, such as intercepting bittorrent traffic on the server or forwarding bittorrent traffic to a VPS on the client side.</p><blockquote><p><code>allocate</code>: <a href="#allocateobject">AllocateObject</a></p></blockquote><p>Specifies the specific settings for port allocation when multiple ports are set up.</p><h3 id="sniffingobject" tabindex="-1"><a class="header-anchor" href="#sniffingobject"><span>SniffingObject</span></a></h3><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;enabled&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;destOverride&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;quic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fakedns&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fakedns+others&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;metadataOnly&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;domainsExcluded&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;routeOnly&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>enabled</code>: true | false</p></blockquote><p>Whether to enable traffic sniffing.</p><blockquote><p><code>destOverride</code>: [&quot;http&quot; | &quot;tls&quot; | &quot;quic&quot; | &quot;fakedns&quot; | &quot;fakedns+others&quot; ]</p></blockquote><p>When the traffic is of a specified type, reset the destination of the current connection to the target address included in the list.</p><p><code>[&quot;fakedns+others&quot;]</code> is equivalent to <code>[&quot;http&quot;, &quot;tls&quot;, &quot;quic&quot;, &quot;fakedns&quot;]</code>, and when the IP address is in the FakeIP range but no domain records are hit, <code>http</code>, <code>tls</code>, and <code>quic</code> will be used for matching. This option is only effective when <code>metadataOnly</code> is set to <code>false</code>.</p><blockquote><p><code>metadataOnly</code>: true | false</p></blockquote><p>When enabled, only use the connection&#39;s metadata to sniff the target address. In this case, sniffer other than <code>fakedns</code> (including <code>fakedns+others</code>) cannot be activated.</p><p>If metadata-only is disabled, the client must send data before the proxy server actually establishes the connection. This behavior is incompatible with protocols that require the server to initiate the first message, such as the SMTP protocol.</p>`,20),x=e("code",null,"domainsExcluded",-1),j=s(`<p>A list of domain names. If the traffic sniffing result matches a domain name in this list, the target address will <strong>not</strong> be reset.</p><div class="custom-container warning"><p class="custom-container-title">Warning</p><p>Currently, <code>domainsExcluded</code> does not support domain name matching in the routing sense. This option may change in the future and cross-version compatibility is not guaranteed.</p></div><blockquote><p><code>routeOnly</code>: true | false</p></blockquote><p>Use the sniffed domain name for routing only, and keep the target address as the IP address. The default value is <code>false</code>.</p><p>This option requires <code>destOverride</code> to be enabled.</p><div class="custom-container tip"><p class="custom-container-title">Tip</p><p>When it is possible to ensure that <strong>the proxied connection can obtain correct DNS resolution</strong>, by using <code>routeOnly</code> and enabling <code>destOverride</code>, and setting the routing matching strategy <code>domainStrategy</code> to <code>AsIs</code>, it is possible to achieve domain and IP separation without DNS resolution throughout the process. The IP used when encountering an IP rule match is the original IP of the domain.</p></div><h3 id="allocateobject" tabindex="-1"><a class="header-anchor" href="#allocateobject"><span>AllocateObject</span></a></h3><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;strategy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;refresh&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token property">&quot;concurrency&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>strategy</code>: &quot;always&quot; | &quot;random&quot;</p></blockquote><p>The port allocation strategy.</p><ul><li><code>&quot;always&quot;</code> means all specified ports in <code>port</code> will be allocated, and Xray will listen on these ports.</li><li><code>&quot;random&quot;</code> means ports will be randomly selected from the <code>port</code> range every <code>refresh</code> minutes, and <code>concurrency</code> ports will be listened on.</li></ul><blockquote><p><code>refresh</code>: number</p></blockquote><p>The interval for refreshing randomly allocated ports in minutes. The minimum value is <code>2</code>, and it is recommended to set to <code>5</code>. This property is only effective when <code>strategy</code> is set to <code>&quot;random&quot;</code>.</p><blockquote><p><code>concurrency</code>: number</p></blockquote><p>The number of randomly allocated ports. The minimum value is <code>1</code>, and the maximum value is one-third of the <code>port</code> range. It is recommended to set to <code>3</code>.</p>`,15);function I(O,S){const i=t("I18nTip"),a=t("RouterLink"),p=t("ExternalLinkIcon"),r=t("Badge");return d(),u("div",null,[o(i),b,e("p",null,[n("Inbound connections are used to receive incoming data and the available protocols are listed in "),o(a,{to:"/en/config/inbounds/"},{default:c(()=>[n("inbound protocols")]),_:1}),n(".")]),m,e("p",null,[n("Unix domain socket can also be specified by providing the absolute path in the form of "),f,n(". The "),k,n(" symbol can be added at the beginning to represent "),e("a",q,[n("abstract"),o(p)]),n(", and "),g,n(" represents padded abstract.")]),v,e("p",null,[n("The connection protocol name. The optional protocol types are listed in "),o(a,{to:"/en/config/inbounds/"},{default:c(()=>[n("inbound protocols")]),_:1}),n(".")]),y,_,e("blockquote",null,[e("p",null,[w,n(": "),o(a,{to:"/en/config/transport.html#streamsettingsobject"},{default:c(()=>[n("StreamSettingsObject")]),_:1})])]),T,e("blockquote",null,[e("p",null,[x,n(": [string] "),o(r,{text:"WIP",type:"warning"})])]),j])}const W=l(h,[["render",I],["__file","inbound.html.vue"]]);export{W as default};
