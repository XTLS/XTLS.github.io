import{_ as i,r as l,o as c,c as d,a as n,b as a,d as s,w as r,e as p}from"./app-8Sz1XVrY.js";const u="/assets/netfilter-CUE6iAyE.png",b={},m=p('<h1 id="透明代理入门" tabindex="-1"><a class="header-anchor" href="#透明代理入门"><span>透明代理入门</span></a></h1><h2 id="什么是透明代理" tabindex="-1"><a class="header-anchor" href="#什么是透明代理"><span>什么是透明代理</span></a></h2><p>透明代理简单地说就是不让被代理的设备感觉到自己被代理了。简单地说就是，被代理的设备上不需要运行任何代理软件(比如 Xray、V2RayNG 等)，当你连接上网络时，你的设备已经被代理了。</p><p>这也意味着，代理的软件运行在别的地方，比如运行在路由器中，通过路由器上网的设备就自动被代理了。</p><h2 id="透明代理的实现" tabindex="-1"><a class="header-anchor" href="#透明代理的实现"><span>透明代理的实现</span></a></h2><p>透明代理的实现目前主要有两种方式：</p><h3 id="tun2socks" tabindex="-1"><a class="header-anchor" href="#tun2socks"><span>tun2socks</span></a></h3><p>可用 Windows/Linux(包括安卓)实现。因为实现过程比较简单，很少有教程，我这里简单描述一下。</p><p><strong>Windows</strong></p>',9),v={href:"https://github.com/NetchX/Netch/releases",target:"_blank",rel:"noopener noreferrer"},k=a("code",null,"[3] [TUN/TAP] 绕过局域网",-1),h=p("<li><p>开启热点</p></li><li><p>打开<code>控制面板</code>-&gt;<code>网络和 Internet</code>-&gt;<code>网络和共享中心</code>-&gt;<code>更改适配器设置</code>，找到<code>TAP-Windows Adapter</code>和<code>Microsoft Wi-Fi Direct Virtual Adapter</code>。</p></li><li><p>鼠标右键点击<code>TAP-Windows Adapter</code>，<code>属性</code>-&gt;<code>共享</code>，勾选<code>允许其他网络用户通过此计算机的 Internet 连接来连接</code>，在<code>家庭网络连接</code>中选择<code>Microsoft Wi-Fi Direct Virtual Adapter</code>的那个网络连接，点击确定。</p></li>",3),g=p('<p><strong>Android</strong></p><ol><li><p>配置连接 V2RayNG</p></li><li><p>开启热点</p></li><li><p>热点设置 -&gt; 允许热点使用 VPN(部分安卓系统可能没有这个选项)</p></li></ol><h3 id="iptables-nftables" tabindex="-1"><a class="header-anchor" href="#iptables-nftables"><span>iptables/nftables</span></a></h3><p>iptables 与 nftables 实现透明代理的原理相同，下文统一使用 iptables。</p><p>基于 iptables 的透明代理实现只能用于 Linux 系统(包括 openwrt/安卓)。由于其比 tun2socks 更高效率以及适合在路由器中配置而广泛使用。</p>',5),R={href:"https://guide.v2fly.org/app/transparent_proxy.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://guide.v2fly.org/app/tproxy.html",target:"_blank",rel:"noopener noreferrer"},_=p('<h2 id="iptables-实现透明代理原理" tabindex="-1"><a class="header-anchor" href="#iptables-实现透明代理原理"><span>iptables 实现透明代理原理</span></a></h2><p>Linux 使用<code>Netfilter</code>来管理网络，<code>Netfilter</code>模型如下：</p><p><img src="'+u+`" alt="Netfilter"></p><p><strong>假设使用路由器作为网关(即我们平时的上网方式)，那么：</strong></p><p>局域网设备通过路由器访问互联网的流量方向：</p><p><code>PREROUTING链-&gt;FORWARD链-&gt;POSTINGROUTING链</code></p><p>局域网设备访问路由器的流量(如登陆路由器 web 管理界面/ssh 连接路由器/访问路由器的 dns 服务器等)方向：</p><p><code>PREROUTING链-&gt;INPUT链-&gt;网关本机</code></p><p>路由器访问互联网的流量方向：</p><p><code>网关本机-&gt;OUTPUT链-&gt;POSTINGROUTING链</code></p><p><strong>通过使用 iptables 操控<code>PREROUTING链</code>和<code>OUTPUT链</code>的流量走向，转发到 Xray，就可以代理局域网设备和网关本机。</strong></p><h2 id="透明代理难在哪里" tabindex="-1"><a class="header-anchor" href="#透明代理难在哪里"><span>透明代理难在哪里</span></a></h2><p>透明代理的难点就在于路由，所谓路由，就是区分哪些流量是直连的，哪些该被代理，所以我个人认为叫做<strong>分流</strong>更加合适。</p><p>我们可以把路由由易到难分为以下几个阶段：</p><ol><li><p>代理全部请求</p></li><li><p>本地局域网 IP/组播 IP 请求直连，其它请求代理</p></li><li><p>在 2 的基础上直连 Xray 发起的连接请求</p></li><li><p>在 3 的基础上直连指向中国大陆 IP 的连接请求，并对国内外域名选择国内外 DNS 服务器解析。</p></li></ol><p>上面说的三篇教程，都是在第四阶段。所以新手直接阅读可能显得有点难懂。</p><h2 id="从零开始一步步实现基于-iptables-tproxy-的透明代理" tabindex="-1"><a class="header-anchor" href="#从零开始一步步实现基于-iptables-tproxy-的透明代理"><span>从零开始一步步实现基于 iptables-tproxy 的透明代理</span></a></h2><h3 id="在开始之前-你需要有一定的基础知识" tabindex="-1"><a class="header-anchor" href="#在开始之前-你需要有一定的基础知识"><span>在开始之前，你需要有一定的基础知识：</span></a></h3><ol><li><p>大概知道什么是 TCP/IP 协议、域名和 DNS 服务器</p></li><li><p>知道什么是 WAN 口，LAN 口，LAN_IP，WAN_IP 以及 DHCP 服务器。对于旁路由，只有一个网口，这里称其为 LAN 口</p></li><li><p>对 Linux 系统有最基础的了解(知道怎么运行命令)</p></li><li><p>能够手写客户端 json 文件配置，至少要能看懂</p></li></ol><h3 id="前期准备工作" tabindex="-1"><a class="header-anchor" href="#前期准备工作"><span>前期准备工作</span></a></h3><div class="custom-container warning"><p class="custom-container-title">注意</p><p>在开始操作前，记得使用 <code>sysctl -w net.ipv4.ip_forward=1</code> 打开linux ipv4封包转发</p></div><p><strong>1. 准备一个运行 Linux 系统的网关</strong></p><p>比如，刷了 OpenWRT 的路由器</p><p><strong>2. 在网关(路由器)准备好 Xray 可执行文件以及配置文件</strong></p><p>配置文件监听 12345 端口，开启 tproxy：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;log&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;loglevel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;warning&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;inbounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">12345</span><span class="token punctuation">,</span>
      <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dokodemo-door&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;settings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;network&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tcp,udp&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;followRedirect&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;streamSettings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;sockopt&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;tproxy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tproxy&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;outbounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      你的服务器配置
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们由易到难，不写 routing，只写一个 inbound 一个 outbound。</p><h3 id="首先-我们先试试做到第一阶段" tabindex="-1"><a class="header-anchor" href="#首先-我们先试试做到第一阶段"><span>首先，我们先试试做到第一阶段</span></a></h3><div class="custom-container warning"><p class="custom-container-title">注意</p><p>如果你不能接受你的机器需要重启，最好先开一个虚拟机进行练习</p></div><p>将所有<code>PREROUTING链</code>的流量，都转发到 Xray 中。</p><p>运行 Xray，执行以下指令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ip</span> rule <span class="token function">add</span> fwmark <span class="token number">1</span> table <span class="token number">100</span>
<span class="token function">ip</span> route <span class="token function">add</span> <span class="token builtin class-name">local</span> <span class="token number">0.0</span>.0.0/0 dev lo table <span class="token number">100</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-N</span> XRAY
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-j</span> TPROXY --on-port <span class="token number">12345</span> --tproxy-mark <span class="token number">1</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-p</span> udp <span class="token parameter variable">-j</span> TPROXY --on-port <span class="token number">12345</span> --tproxy-mark <span class="token number">1</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> PREROUTING <span class="token parameter variable">-j</span> XRAY
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当你输入完之后，如果你是使用 ssh 连接到网关上的，你会发现 ssh 的连接断开了(不用紧张，断电重启即可恢复)，并且透明代理无法上网；如果你是的网关是虚拟机，你会发现网关本身也无法上网，并且 Xray 日志 access_log 中出现许多源地址为目标地址，目标地址为 WAN_IP 的请求。</p><p>理论上网关本机访问公网只会经过<code>OUTPUT链</code>和<code>POSTROUTING链</code>，为什么操控<code>PREROUTING链</code>会导致网关无法上网呢？这是因为网络通讯往往是双向的，虽然网关访问公网 IP 不需要经过<code>PREROUTING链</code>，但被访问的服务器向网关返回信息时要经过<code>PREROUTING链</code>，且这部分被转发到 Xray 了，因此出现了日志中的反向请求。</p><p>我们修改一下规则，源 IP 不是来自局域网的则返回。重启网关，运行 Xray，执行以下指令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ip</span> rule <span class="token function">add</span> fwmark <span class="token number">1</span> table <span class="token number">100</span>
<span class="token function">ip</span> route <span class="token function">add</span> <span class="token builtin class-name">local</span> <span class="token number">0.0</span>.0.0/0 dev lo table <span class="token number">100</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-N</span> XRAY
<span class="token comment"># &quot;网关LAN_IP地址段&quot; 通过运行命令&quot;ip address | grep -w &quot;inet&quot; | awk &#39;{print $2}&#39;&quot;获得，是其中的一个</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token operator">!</span> <span class="token parameter variable">-s</span> 网关LAN_IP地址段 <span class="token parameter variable">-j</span> RETURN
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-j</span> TPROXY --on-port <span class="token number">12345</span> --tproxy-mark <span class="token number">1</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-p</span> udp <span class="token parameter variable">-j</span> TPROXY --on-port <span class="token number">12345</span> --tproxy-mark <span class="token number">1</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> PREROUTING <span class="token parameter variable">-j</span> XRAY
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后你会发现，虽然 ssh 连接断开了，但是透明代理已经可用了。只要我们修改系统 dns 为公共 dns，就能正常上网了(因为现在网关访问不了，所以 dns 设置为网关是不行的)。</p><p>至此，第一阶段就完成了。之所以无法访问网关，是因为代理规则代理了全部流量，包括访问网关的流量。试想在 VPS 上访问你本地的网关，肯定是访问不了的，所以我们要对这部分流量直连，请看第二阶段：</p><h3 id="第二阶段" tabindex="-1"><a class="header-anchor" href="#第二阶段"><span>第二阶段</span></a></h3><p>重启网关，运行 Xray，执行以下指令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ip</span> rule <span class="token function">add</span> fwmark <span class="token number">1</span> table <span class="token number">100</span>
<span class="token function">ip</span> route <span class="token function">add</span> <span class="token builtin class-name">local</span> <span class="token number">0.0</span>.0.0/0 dev lo table <span class="token number">100</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-N</span> XRAY

<span class="token comment"># 所有目标地址在网关所在网段的请求直连</span>
<span class="token comment"># 通过运行命令&quot;ip address | grep -w &quot;inet&quot; | awk &#39;{print $2}&#39;&quot;获得，一般来说有多个</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-d</span> 网关所在网段1 <span class="token parameter variable">-j</span> RETURN
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-d</span> 网关所在网段2 <span class="token parameter variable">-j</span> RETURN
<span class="token punctuation">..</span>.

<span class="token comment"># 目标地址为组播IP/E类地址/广播IP的请求直连</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-d</span> <span class="token number">224.0</span>.0.0/3 <span class="token parameter variable">-j</span> RETURN

iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-j</span> TPROXY --on-port <span class="token number">12345</span> --tproxy-mark <span class="token number">1</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-p</span> udp <span class="token parameter variable">-j</span> TPROXY --on-port <span class="token number">12345</span> --tproxy-mark <span class="token number">1</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> PREROUTING <span class="token parameter variable">-j</span> XRAY
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用这条规则后，上一条规则<code>iptables -t mangle -A XRAY ! -s 网关LAN_IP地址段 -j RETURN</code>便成为了多余规则，可以删去。</p><p>至此，第二阶段完成。网关已经可以访问，ssh 不会断开。</p><h3 id="第三阶段" tabindex="-1"><a class="header-anchor" href="#第三阶段"><span>第三阶段</span></a></h3><p>我们平时用的 DNS 一般来自路由器，但这个 iptables 规则只代理了局域网中的设备，却没有代理网关本机，这样返回的 DNS 查询结果可能是错误的或者污染的。</p><p>iptables-tproxy 不支持对<code>OUTPUT链</code>操作，但是我们可以通过配置<code>策略路由</code>，把<code>OUTPUT链</code>中相应的包重新路由到<code>PREROUTING链</code>上。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 添加策略路由: 标记为1的包，走路由表100</span>
<span class="token function">ip</span> rule <span class="token function">add</span> fwmark <span class="token number">1</span> table <span class="token number">100</span>
<span class="token comment"># 添加路由条目到路由表100: 所有包路由到本地</span>
<span class="token function">ip</span> route <span class="token function">add</span> <span class="token builtin class-name">local</span> <span class="token number">0.0</span>.0.0/0 dev lo table <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过配置上述<code>策略路由</code>，我们只需要在<code>OUTPUT链</code>中给包打标记为<code>1</code>，相应的包就会路由到网关本机，即<code>PREROUTING链</code>上。所以我们就给网关本机需要代理的请求在<code>OUTPUT链</code>上标记<code>1</code>即可。</p><p>如果要代理网关本机发出的的全部请求，就会引入一个问题，Xray 运行在网关，Xray 向代理服务端发送请求，这个请求又被代理了，就形成了回环。</p><p>因此要代理网关本机，就要避免回环发生，即代理规则中规避 Xray 请求的流量。</p><p><strong>常见的方法有三种：</strong></p><ol><li>直连目标地址为 VPS 的流量</li></ol><p>重启网关，运行 Xray，执行以下指令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#代理局域网设备</span>
<span class="token comment">#继承上一个阶段的成果</span>
<span class="token function">ip</span> rule <span class="token function">add</span> fwmark <span class="token number">1</span> table <span class="token number">100</span>
<span class="token function">ip</span> route <span class="token function">add</span> <span class="token builtin class-name">local</span> <span class="token number">0.0</span>.0.0/0 dev lo table <span class="token number">100</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-N</span> XRAY
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-d</span> 网关所在网段1 <span class="token parameter variable">-j</span> RETURN
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-d</span> 网关所在网段2 <span class="token parameter variable">-j</span> RETURN
<span class="token punctuation">..</span>.
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-d</span> <span class="token number">224.0</span>.0.0/3 <span class="token parameter variable">-j</span> RETURN
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-j</span> TPROXY --on-port <span class="token number">12345</span> --tproxy-mark <span class="token number">1</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY <span class="token parameter variable">-p</span> udp <span class="token parameter variable">-j</span> TPROXY --on-port <span class="token number">12345</span> --tproxy-mark <span class="token number">1</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> PREROUTING <span class="token parameter variable">-j</span> XRAY

<span class="token comment">#代理网关本机</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-N</span> XRAY_MASK
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY_MASK <span class="token parameter variable">-d</span> 网关所在网段1 <span class="token parameter variable">-j</span> RETURN
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY_MASK <span class="token parameter variable">-d</span> 网关所在网段2 <span class="token parameter variable">-j</span> RETURN
<span class="token punctuation">..</span>.
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY_MASK <span class="token parameter variable">-d</span> <span class="token number">224.0</span>.0.0/3 <span class="token parameter variable">-j</span> RETURN
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY_MASK <span class="token parameter variable">-d</span> VPS公网ip/32 <span class="token parameter variable">-j</span> RETURN
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> XRAY_MASK <span class="token parameter variable">-j</span> MARK --set-mark <span class="token number">1</span>
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> OUTPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-j</span> XRAY_MASK
iptables <span class="token parameter variable">-t</span> mangle <span class="token parameter variable">-A</span> OUTPUT <span class="token parameter variable">-p</span> udp <span class="token parameter variable">-j</span> XRAY_MASK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这么配置有个缺点，如果使用 CDN 或者 VPS 很多的话，就不好写规则了。</p><ol start="2"><li>通过 mark 规避</li></ol><p>三个白话文教程都是使用这种方法规避，自行参考，这里不再赘述。</p><ol start="3"><li>通过 gid 规避(推荐)</li></ol>`,58),f=a("p",null,"这样就完成了第三阶段的代理，也就是平时说的全局代理。但是记得把网关的 DNS 服务器设置为国外的 DNS 服务器，否则可能依然返回被污染的结果。",-1),T=a("h3",{id:"第四阶段",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#第四阶段"},[a("span",null,"第四阶段")])],-1),N=a("p",null,"其实，并不是所有人都需要实现第四阶段。全局代理对于大部分情况已经适用。",-1),P=a("p",null,"特别是对于旁路由而言。需要代理时，将网关调成旁路由的 IP，不需要代理时，将网关换回主路由 IP。",-1),y=a("p",null,"至于第四阶段的具体实现，那三篇白话文教程讲的都是。在理解了上面的内容后，再去看那三篇白话文教程，就比较容易理解了。",-1),E=a("h3",{id:"代理-ipv6",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#代理-ipv6"},[a("span",null,"代理 ipv6")])],-1),X=a("h1",{id:"iptables-透明代理的其它注意事项",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#iptables-透明代理的其它注意事项"},[a("span",null,"iptables 透明代理的其它注意事项")])],-1),x=a("li",null,[a("p",null,[s("如果作为代理的网关作为主路由，要在"),a("code",null,"PREROUTING链"),s("规则中加一条"),a("code",null,"iptables -t mangle -A XRAY ! -s 网关LAN_IP地址段 -j RETURN"),s("，即在第一阶段使用、第二阶段被删除的指令。如果不写，WAN 口中同网段的其它人可以将网关填写成你的 WAN_IP，从而蹭你的透明代理用，还可能带来一定的危险性。")])],-1),U={href:"https://guide.v2fly.org/app/tproxy.html#%E8%AE%BE%E7%BD%AE%E7%BD%91%E5%85%B3",target:"_blank",rel:"noopener noreferrer"},I=a("code",null,"手动配置 PC 的网络，将默认网关指向树莓派的地址即 192.168.1.22。此时 PC 应当能正常上网（由于还没设置代理，“正常”是指可以上国内的网站）",-1),O={href:"https://github.com/BioniCosmos",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://guide.v2fly.org/app/tproxy.html#%E8%A7%A3%E5%86%B3-too-many-open-files-%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"},q=a("strong",null,[a("a",{href:"../iptables_gid#3-%E9%85%8D%E7%BD%AE%E6%9C%80%E5%A4%A7%E6%96%87%E4%BB%B6%E5%A4%A7%E5%BC%80%E6%95%B0%E8%BF%90%E8%A1%8Cxray%E5%AE%A2%E6%88%B7%E7%AB%AF"},"[透明代理]通过 gid 规避 Xray 流量-配置最大文件大开数&运行 Xray 客户端")],-1),j=a("li",null,[a("p",null,"避免已有连接的包二次通过 TPROXY ,待补充...")],-1),w=a("li",null,[a("p",null,"主路由、单臂路由与旁路由，待补充...")],-1);function S(B,G){const o=l("I18nTip"),e=l("ExternalLinkIcon"),t=l("RouterLink");return c(),d("div",null,[n(o),m,a("ol",null,[a("li",null,[a("p",null,[s("安装 "),a("strong",null,[a("a",v,[s("Netch"),n(e)])]),s(" ，使用模式"),k,s("启动。")])]),h]),g,a("p",null,[s("现存的三篇白话文透明代理教程其实讲的都是基于这种方案的透明代理实现，它们是： "),a("strong",null,[a("a",R,[s("新 V2Ray 白话文指南-透明代理"),n(e)])]),s(" 、 "),a("strong",null,[a("a",A,[s("新 V2Ray 白话文指南-透明代理(TPROXY)"),n(e)])]),s(" 、 "),a("strong",null,[n(t,{to:"/document/level-2/tproxy.html"},{default:r(()=>[s("透明代理（TProxy）配置教程")]),_:1})]),s(" 。其中第一篇是基于 iptables-redirect 模式，已经过时了，不建议使用，仅供参考。第二篇和第三篇讲的都是基于 iptables-tproxy 模式的透明代理实现。")]),_,a("p",null,[s("参考 "),a("strong",null,[n(t,{to:"/document/level-2/iptables_gid.html"},{default:r(()=>[s("[透明代理]通过 gid 规避 Xray 流量")]),_:1})])]),f,T,N,P,y,E,a("p",null,[s("上面的规则只对 ipv4 生效，如果还想要代理 ipv6 请求，则使用 ip6tables 命令，用法与 iptables 基本相同。参考 "),a("strong",null,[n(t,{to:"/document/level-2/iptables_gid#4-%E8%AE%BE%E7%BD%AEiptables%E8%A7%84%E5%88%99.html"},{default:r(()=>[s("[透明代理]通过 gid 规避 Xray 流量#4-设置 iptables 规则")]),_:1})])]),X,a("ol",null,[x,a("li",null,[a("p",null,[a("strong",null,[a("a",U,[s("新 V2Ray 白话文指南-透明代理(TPROXY)#设置网关"),n(e)])]),s(" 中的第三条说："),I,s("。实际上，Ubuntu、CentOS、debian 等系统就算开启了 IP 转发，PC 也不能正常上网，这是正常的。事实上只有 OpenWRT 能做到文中所描述的那样，据 "),a("strong",null,[a("a",O,[s("@BioniCosmos"),n(e)])]),s(" 点拨，这是由于一般的 Linux 系统没有 Masquery 规则。")])]),a("li",null,[a("p",null,[a("strong",null,[a("a",Y,[s("too many open files 问题"),n(e)])]),s(" ，解决方法见 "),q])]),j,w])])}const D=i(b,[["render",S],["__file","transparent_proxy.html.vue"]]);export{D as default};
