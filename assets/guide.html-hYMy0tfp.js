import{_ as t,r as o,o as c,c as d,a as n,b as e,d as l,e as i}from"./app-8X5BFfQW.js";const h={},u=i('<h1 id="开发规范" tabindex="-1"><a class="header-anchor" href="#开发规范"><span>开发规范</span></a></h1><h2 id="基本" tabindex="-1"><a class="header-anchor" href="#基本"><span>基本</span></a></h2><h3 id="版本控制" tabindex="-1"><a class="header-anchor" href="#版本控制"><span>版本控制</span></a></h3><p>Project X 的代码被托管在 github 上:</p>',4),p={href:"https://github.com/XTLS/Xray-core",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/XTLS/Xray-install",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/XTLS/Xray-examples",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/XTLS/Xray-docs-next",target:"_blank",rel:"noopener noreferrer"},m={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},f=e("h3",{id:"分支-branch",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#分支-branch"},[e("span",null,"分支（Branch）")])],-1),x=e("ul",null,[e("li",null,"本项目的主干分支为 main，"),e("li",null,"本项目的发布主分支同为 main，"),e("li",null,"需要确保 main 在任一时刻都是可编译，且可正常使用的。"),e("li",null,"如果需要开发新的功能，请新建分支进行开发，在开发完成并且经过充分测试后，合并回主干分支。"),e("li",null,"已经合并入主干且没有必要存在的分支，请删除。")],-1),v=e("h3",{id:"发布-release",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#发布-release"},[e("span",null,"发布（Release）")])],-1),X=e("ul",null,[e("li",null,[l("建立尝鲜版本和稳定版本两个发布通道 "),e("ul",null,[e("li",null,"尝鲜版本，可以为 daily build，主要用于特定情况的测试，尝鲜和获得即时反馈和再改进。"),e("li",null,"稳定版本，为定时更新(比如月更)，合并稳定的修改并发布。")])])],-1),y=e("h3",{id:"引用其它项目",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#引用其它项目"},[e("span",null,"引用其它项目")])],-1),k={href:"https://pkg.go.dev/search?limit=25&m=package&q=golang.org%2Fx",target:"_blank",rel:"noopener noreferrer"},P=e("li",null,"如需引用其它项目，请事先创建 issue 讨论；",-1),T=e("li",null,[l("其它 "),e("ul",null,[e("li",null,"不违反双方的协议，且对项目有帮助的工具，都可以使用。")])],-1),B=e("h2",{id:"开发流程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#开发流程"},[e("span",null,"开发流程")])],-1),L=e("h3",{id:"写代码之前",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#写代码之前"},[e("span",null,"写代码之前")])],-1),E={href:"https://github.com/XTLS/Xray-core/issues",target:"_blank",rel:"noopener noreferrer"},G=e("h3",{id:"修改代码",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#修改代码"},[e("span",null,"修改代码")])],-1),R={href:"https://golang.org/doc/effective_go.html",target:"_blank",rel:"noopener noreferrer"},S=e("li",null,[l("每一次 push 之前，请运行："),e("code",null,"go generate core/format.go"),l("；")],-1),q=e("li",null,[l("如果需要修改 protobuf，例如增加新配置项，请运行："),e("code",null,"go generate core/proto.go"),l("；")],-1),A=e("li",null,[l("提交 pull request 之前，建议测试通过："),e("code",null,"go test ./..."),l("；")],-1),F=e("li",null,"提交 pull request 之前，建议新增代码有超过 70% 的代码覆盖率（code coverage）；",-1),I=e("li",null,[l("其它 "),e("ul",null,[e("li",null,"请注意代码的可读性。")])],-1),w=i(`<h3 id="pull-request" tabindex="-1"><a class="header-anchor" href="#pull-request"><span>Pull Request</span></a></h3><ul><li>提交 PR 之前，请先运行 <code>git pull https://github.com/XTLS/Xray-core.git</code> 以确保 merge 可顺利进行；</li><li>一个 PR 只做一件事，如有对多个 bug 的修复，请对每一个 bug 提交一个 PR；</li><li>由于 Golang 的特殊需求（Package path），Go 项目的 PR 流程和其它项目有所不同，建议流程如下： <ol><li>先 Fork 本项目，创建你自己的 <code>github.com/&lt;your_name&gt;/Xray-core.git</code> 仓库；</li><li>克隆你自己的 Xray 仓库到本地：<code>git clone https://github.com/&lt;your_name&gt;/Xray-core.git</code>；</li><li>基于 <code>main</code> 分支创建新的分支，例如 <code>git branch issue24 main</code>；</li><li>在新创建的分支上作修改并提交修改(commit)；</li><li>在推送(push)修改完成的分支到自己的仓库前，先切换到 <code>main</code> 分支，运行 <code>git pull https://github.com/XTLS/Xray-core.git</code> 拉取最新的远端代码；</li><li>如果上一步拉取得到了新的远端代码，则切换到之前自己创建的分支，运行 <code>git rebase main</code> 执行分支合并操作。如遇到文件冲突，则需要解决冲突；</li><li>上一步处理完毕后，就可以把自己创建的分支推送到自己的仓库：<code>git push -u origin your-branch</code></li><li>最后，把自己仓库的新推送的分支往 <code>XTLS/Xray-core</code> 的 <code>main</code> 分支发 PR 即可；</li><li>请在 PR 的标题和正文中，完整表述此次 PR 解决的问题 / 新增的功能 / 代码所做的修改的用意等；</li><li>耐心等待开发者的回应。</li></ol></li></ul><h3 id="对代码的修改" tabindex="-1"><a class="header-anchor" href="#对代码的修改"><span>对代码的修改</span></a></h3><h4 id="功能性问题" tabindex="-1"><a class="header-anchor" href="#功能性问题"><span>功能性问题</span></a></h4><p>请提交至少一个测试用例（Test Case）来验证对现有功能的改动。</p><h4 id="性能相关" tabindex="-1"><a class="header-anchor" href="#性能相关"><span>性能相关</span></a></h4><p>请提交必要的测试数据来证明现有代码的性能缺陷，或是新增代码的性能提升。</p><h4 id="新功能" tabindex="-1"><a class="header-anchor" href="#新功能"><span>新功能</span></a></h4><ul><li>如果新增功能对已有功能不影响，请提供可以开启/关闭的开关（如 flag），并使新功能保持默认关闭的状态；</li><li>大型新功能（比如增加一个新的协议）开发之前，请先提交一个 issue，讨论完毕之后再进行开发。</li></ul><h4 id="其它" tabindex="-1"><a class="header-anchor" href="#其它"><span>其它</span></a></h4><p>视具体情况而定。</p><h2 id="xray-编码规范" tabindex="-1"><a class="header-anchor" href="#xray-编码规范"><span>Xray 编码规范</span></a></h2><p>以下内容适用于 Xray 中的 Golang 代码。</p><h3 id="代码结构" tabindex="-1"><a class="header-anchor" href="#代码结构"><span>代码结构</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Xray-core
├── app        // 应用模块
│   ├── router // 路由
├── common     // 公用代码
├── proxy      // 通讯协议
│   ├── blackhole
│   ├── dokodemo-door
│   ├── freedom
│   ├── socks
│   ├── vmess
├── transport  // 传输模块
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编码规范" tabindex="-1"><a class="header-anchor" href="#编码规范"><span>编码规范</span></a></h3><p>基本与 Golang 官方所推荐做法一致，有一些例外。写在这里以方便大家熟悉 Golang。</p><h4 id="命名" tabindex="-1"><a class="header-anchor" href="#命名"><span>命名</span></a></h4>`,18),C=e("li",null,[l("文件和目录名尽量使用单个英文单词，比如 hello.go； "),e("ul",null,[e("li",null,"如果实在没办法，则目录使用连接线／文件名使用下划线连接两个（或多个单词），比如 hello-world/hello_again.go；"),e("li",null,"测试代码使用 _test.go 结尾；")])],-1),N=e("li",null,[l("类型使用 Pascal 命名法，比如 ConnectionHandler； "),e("ul",null,[e("li",null,"对缩写不强制小写，即 HTML 不必写成 Html；")])],-1),V=e("li",null,"公开成员变量也使用 Pascal 命名法；",-1),H={href:"https://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB",target:"_blank",rel:"noopener noreferrer"},M=e("code",null,"privateAttribute",-1),j=e("li",null,[l("为了方便重构，方法建议全部使用 Pascal 命名法； "),e("ul",null,[e("li",null,[l("完全私有的类型放入 "),e("code",null,"internal"),l(" 。")])])],-1),z=e("h4",{id:"内容组织",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#内容组织"},[e("span",null,"内容组织")])],-1),D=e("ul",null,[e("li",null,"一个文件包含一个主要类型，及其相关的私有函数等；"),e("li",null,"测试相关的文件，如 Mock 等工具类，放入 testing 子目录。")],-1);function W(J,K){const r=o("I18nTip"),a=o("ExternalLinkIcon"),s=o("Badge");return c(),d("div",null,[n(r),u,e("ul",null,[e("li",null,[l("Xray 核心 "),e("a",p,[l("Xray-core"),n(a)])]),e("li",null,[l("安装脚本 "),e("a",_,[l("Xray-install"),n(a)])]),e("li",null,[l("配置模板 "),e("a",g,[l("Xray-examples"),n(a)])]),e("li",null,[l("Xray 文档 "),e("a",b,[l("Xray-docs-next"),n(a)])])]),e("p",null,[l("您可以使用 "),e("a",m,[l("Git"),n(a)]),l(" 来获取代码。")]),f,x,v,n(s,{text:"WIP",type:"warning"}),X,y,e("ul",null,[e("li",null,[l("Golang "),e("ul",null,[e("li",null,[l("产品代码建议使用 Golang 标准库和 "),e("a",k,[l("golang.org/x/"),n(a)]),l(" 下的库；")]),P])]),T]),B,L,e("p",null,[l("发现任何问题，或对项目有任何想法，请创建 "),e("a",E,[l("issue"),n(a)]),l(" 讨论以减少重复劳动和消耗在代码上的时间。")]),G,e("ul",null,[e("li",null,[l("Golang "),e("ul",null,[e("li",null,[l("请参考 "),e("a",R,[l("Effective Go"),n(a)]),l("；")]),S,q,A,F])]),I]),w,e("ul",null,[C,N,V,e("li",null,[l("私有成员变量使用 "),e("a",H,[l("小驼峰式命名法"),n(a)]),l(" ，如 "),M,l(" ；")]),j]),z,D])}const Q=t(h,[["render",W],["__file","guide.html.vue"]]);export{Q as default};
