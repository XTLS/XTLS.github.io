import{_ as t,r as a,o as n,c as o,a as i,e as s}from"./app-CikVt7pH.js";const d={},h=s('<h1 id="mux-cool-protocol" tabindex="-1"><a class="header-anchor" href="#mux-cool-protocol"><span>Mux.Cool Protocol</span></a></h1><p>Mux.Cool protocol is a multiplexing transport protocol that is used to transmit multiple independent data streams within an established data stream.</p><h2 id="version" tabindex="-1"><a class="header-anchor" href="#version"><span>Version</span></a></h2><p>The current version is 1 Beta.</p><h2 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies"><span>Dependencies</span></a></h2><h3 id="underlying-protocol" tabindex="-1"><a class="header-anchor" href="#underlying-protocol"><span>Underlying Protocol</span></a></h3><p>Mux.Cool must run on top of a reliable established data stream.</p><h2 id="communication-process" tabindex="-1"><a class="header-anchor" href="#communication-process"><span>Communication Process</span></a></h2><p>Within a Mux.Cool connection, multiple sub-connections can be transmitted, each with a unique ID and status. The transmission process consists of frames, with each frame used to transmit data for a specific sub-connection.</p><h3 id="client-behavior" tabindex="-1"><a class="header-anchor" href="#client-behavior"><span>Client behavior</span></a></h3><p>When there is a need for a connection and there are no existing available connections, the client initiates a new connection to the server, referred to as the &quot;main connection&quot;.</p><ol><li>One main connection can be used to send several sub-connections. The client can decide independently how many sub-connections the main connection can handle.</li><li>For a new sub-connection, the client must send the <code>New</code> status to notify the server to establish the sub-connection, and then use the <code>Keep</code> status to transmit data.</li><li>When the sub-connection ends, the client sends the <code>End</code> status to notify the server to close the sub-connection.</li><li>The client can decide when to close the main connection, but must ensure that the server also maintains the connection.</li><li>The client can use the KeepAlive status to prevent the server from closing the main connection.</li></ol><h3 id="server-side-behavior" tabindex="-1"><a class="header-anchor" href="#server-side-behavior"><span>Server-side behavior</span></a></h3><p>When a new sub-connection is received on the server side, the server should handle it as a normal connection.</p><ol><li>When the status &quot;End&quot; is received, the server can close the upstream connection to the target address.</li><li>The same ID used in the request must be used to transfer sub-connection data in the server response.</li><li>The server cannot use the &quot;New&quot; status.</li><li>The server can use the KeepAlive status to avoid the client closing the main connection.</li></ol><h2 id="data-format" tabindex="-1"><a class="header-anchor" href="#data-format"><span>Data Format</span></a></h2><p>Mux.Cool uses symmetric transmission format, where the client and server send and receive data in the same format.</p><h3 id="frame-format" tabindex="-1"><a class="header-anchor" href="#frame-format"><span>Frame Format</span></a></h3><table><thead><tr><th>2 Bytes</th><th>L Bytes</th><th>X Bytes</th></tr></thead><tbody><tr><td>Metadata Length L</td><td>Metadata</td><td>Additional Data</td></tr></tbody></table><h3 id="metadata" tabindex="-1"><a class="header-anchor" href="#metadata"><span>Metadata</span></a></h3><p>There are several types of metadata. All types of metadata contain two items, ID and Opt, with the following meanings:</p><ul><li>ID: Unique identifier of the sub-connection <ul><li>For general MUX sub-connections, the ID is accumulated starting from 1</li><li>For XUDP, the ID is always 0</li></ul></li><li>Opt: <ul><li>D(0x01): Additional data is available</li></ul></li></ul><p>When option Opt(D) is enabled, the additional data format is as follows:</p><table><thead><tr><th>2 Bytes</th><th>X-2 Bytes</th></tr></thead><tbody><tr><td>Length X-2</td><td>Data</td></tr></tbody></table><h3 id="new-sublink-new" tabindex="-1"><a class="header-anchor" href="#new-sublink-new"><span>New Sublink (New)</span></a></h3><table><thead><tr><th>2 Bytes</th><th>1 Byte</th><th>1 Byte</th><th>1 Byte</th><th>2 Bytes</th><th>1 Byte</th><th>A Bytes</th></tr></thead><tbody><tr><td>ID</td><td>0x01</td><td>Option</td><td>Network N</td><td>Port</td><td>Type T</td><td>Address</td></tr></tbody></table><p>where:</p><ul><li>Network type N: <ul><li>0x01: TCP, indicating that the traffic of the current sub-connection should be sent to the destination in the way of TCP.</li><li>0x02: UDP, indicating that the traffic of the current sub-connection should be sent to the destination in the way of UDP.</li></ul></li><li>Address type T: <ul><li>0x01: IPv4</li><li>0x02: Domain name</li><li>0x03: IPv6</li></ul></li><li>Address A: <ul><li>When T = 0x01, A is a 4-byte IPv4 address;</li><li>When T = 0x02, A is a 1-byte length (L) + L-byte domain name;</li><li>When T = 0x03, A is a 16-byte IPv6 address;</li></ul></li></ul><p>If Opt(D) is enabled when creating a sub-connection, the data carried by this frame needs to be sent to the target host.</p><h3 id="keep-sub-connections" tabindex="-1"><a class="header-anchor" href="#keep-sub-connections"><span>Keep sub-connections</span></a></h3><table><thead><tr><th>2 Bytes</th><th>1 Byte</th><th>1 Byte</th></tr></thead><tbody><tr><td>ID</td><td>0x02</td><td>Option</td></tr></tbody></table><p>If Opt(D) is enabled while maintaining sub-connections, the data carried by this frame needs to be sent to the target host. XUDP adds the UDP address after Opt(D), and the format is the same as creating a new sub-connection.</p><h3 id="end" tabindex="-1"><a class="header-anchor" href="#end"><span>End</span></a></h3><table><thead><tr><th>2 Bytes</th><th>1 Byte</th><th>1 Byte</th></tr></thead><tbody><tr><td>ID</td><td>0x03</td><td>Option</td></tr></tbody></table><p>If Opt(D) is enabled while maintaining sub-connections, the data carried by this frame needs to be sent to the target host.</p><h3 id="keepalive" tabindex="-1"><a class="header-anchor" href="#keepalive"><span>KeepAlive</span></a></h3><table><thead><tr><th>2 Bytes</th><th>1 Byte</th><th>1 Byte</th></tr></thead><tbody><tr><td>ID</td><td>0x04</td><td>Option Opt</td></tr></tbody></table><p>While staying connected:</p><ul><li>If Opt(D) is enabled, the data carried by this frame must be discarded.</li><li>ID can be a random value.</li></ul><h2 id="application" tabindex="-1"><a class="header-anchor" href="#application"><span>Application</span></a></h2><p>The Mux.Cool protocol is agnostic to the underlying protocol and can theoretically use any reliable streaming connection to transmit Mux.Cool protocol data.</p><p>In target-oriented protocols such as Shadowsocks and VMess, a specified address must be included when establishing a connection. To maintain compatibility, the Mux.Cool protocol specifies the address as &quot;v1.mux.cool&quot;. When the target address of the main connection matches this address, the Mux.Cool forwarding method is used. Otherwise, forwarding is done in the traditional way. (Note: This is an internal tag in the program, and VMess and VLESS do not send the &quot;v1.mux.cool&quot; address in data packets.)</p>',42);function r(c,l){const e=a("I18nTip");return n(),o("div",null,[i(e),h])}const u=t(d,[["render",r],["__file","muxcool.html.vue"]]);export{u as default};
