import{_ as p,r as e,o as d,c as u,a as s,b as o,d as n,w as r,e as l}from"./app-BNfGivRm.js";const i={},k=o("h1",{id:"dns",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#dns"},[o("span",null,"DNS")])],-1),q=o("p",null,"DNS 是一个出站协议，主要用于拦截和转发 DNS 查询。",-1),b=o("p",null,"此出站协议只能接收 DNS 流量（包含基于 UDP 和 TCP 协议的查询），其它类型的流量会导致错误。",-1),_=o("code",null,"nonIPQuery",-1),h=l(`<h2 id="outboundconfigurationobject" tabindex="-1"><a class="header-anchor" href="#outboundconfigurationobject"><span>OutboundConfigurationObject</span></a></h2><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;network&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.1.1.1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">53</span><span class="token punctuation">,</span>
  <span class="token property">&quot;nonIPQuery&quot;</span><span class="token operator">:</span> <span class="token string">&quot;drop&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;blockTypes&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>network</code>: &quot;tcp&quot; | &quot;udp&quot;</p></blockquote><p>修改 DNS 流量的传输层协议，可选的值有 <code>&quot;tcp&quot;</code> 和 <code>&quot;udp&quot;</code>。当不指定时，保持来源的传输方式不变。</p><blockquote><p><code>address</code>: address</p></blockquote><p>修改 DNS 服务器地址。当不指定时，保持来源中指定的地址不变。</p><blockquote><p><code>port</code>: number</p></blockquote><p>修改 DNS 服务器端口。当不指定时，保持来源中指定的端口不变。</p><blockquote><p><code>nonIPQuery</code>: string</p></blockquote><p>控制非 IP 查询（非 A 和 AAAA），<code>&quot;drop&quot;</code> 丢弃或者 <code>&quot;skip&quot;</code> 不由内置 DNS 服务器处理，将转发给目标。默认为 <code>&quot;drop&quot;</code>。</p><blockquote><p><code>blockTypes</code>: array</p></blockquote><p>为一个int数组，屏蔽数组中的查询类型，如 <code>&quot;blockTypes&quot;:[65,28]</code> 表示屏蔽type 65(HTTPS) 和 28(AAAA)</p><p>由于 <code>nonIPQuery</code> 默认 drop 所有非 A 和 AAAA 查询, 所以需要将其设置为 skip 本选项才能进一步发挥作用。当然也可以不修改，单纯用来屏蔽A或者AAAA来屏蔽 ipv4/ipv6 查询, 但非常不推荐那么做，建议在内置DNS的 <code>queryStrategy</code> 对相关内容进行设置。</p>`,13),A={id:"dns-配置实例",tabindex:"-1"},m={class:"header-anchor",href:"#dns-配置实例"};function v(y,g){const t=e("I18nTip"),a=e("RouterLink"),c=e("Badge");return d(),u("div",null,[s(t),k,q,b,o("p",null,[n("在处理 DNS 查询时，此出站协议会将 IP 查询（即 A 和 AAAA）转发给内置的 "),s(a,{to:"/config/dns.html"},{default:r(()=>[n("DNS 服务器")]),_:1}),n("。其它类型的查询流量见下的 "),_,n("。")]),h,o("h2",A,[o("a",m,[o("span",null,[n("DNS 配置实例 "),s(c,{text:"WIP",type:"warning"})])])])])}const f=p(i,[["render",v],["__file","dns.html.vue"]]);export{f as default};
