import{_ as r,r as t,o as l,c,a as o,b as s,d as e,e as a}from"./app-Dp4t6tDQ.js";const d="/assets/ch04-img01-nano-ui-B4Aenfjz.png",h="/assets/ch04-img02-sshd-conf-full-Dv8kUzC-.gif",u="/assets/ch04-img03-adduser-B0VGcN0p.png",p="/assets/ch04-img04-adduser-full-DgDkjVtm.gif",m="/assets/ch04-img05-sudo-full-DeKisL39.gif",g="/assets/ch04-img06-ssh-no-root-full-DZeR7uks.gif",y="/assets/ch04-img07-putty-default-user-D6pt-VE-.png",f="/assets/ch04-img08-puttygen-save-CHw98Rml.png",w="/assets/ch04-img09-puttygen-save-keys-NM1Wm7kW.png",v="/assets/ch04-img10-winscp-import-session-sXjUnOBu.png",b="/assets/ch04-img11-winscp-ui-AN7pET93.png",k="/assets/ch04-img12-winscp-locations-XArMgNVV.png",S="/assets/ch04-img13-winscp-newfolder-key-CM1OfBQF.png",x="/assets/ch04-img14-winscp-upload-key-BygTVpGm.png",T="/assets/ch04-img15-winscp-rename-key-8iQ3gLs7.png",_="/assets/ch04-img16-winscp-full-B_z2QlO-.gif",P="/assets/ch04-img17-rsa-login-full-CZytVZwr.gif",I="/assets/ch04-img18-putty-privatekey-location-DW84vHHi.png",A="/assets/ch04-img19-putty-privatekey-passphrase-DQfUeTjA.png",C="/assets/ch04-img20-winscp-privatekey-location-LtQ_87aZ.png",L={},q=a(`<h1 id="chapter-4-security-and-protection" tabindex="-1"><a class="header-anchor" href="#chapter-4-security-and-protection"><span>[Chapter 4] Security and Protection</span></a></h1><h2 id="_4-1-why-do-we-need-security-protection" tabindex="-1"><a class="header-anchor" href="#_4-1-why-do-we-need-security-protection"><span>4.1 Why Do We Need Security Protection?</span></a></h2><p>Security protection for Linux servers is a complex and huge subject. Countless websites, apps, services, and even offline infrastructure are built on the foundation of Linux, which involves huge economic benefits and commercial value. This also means that there is a huge motivation for black and gray industries to launch attacks. However, these services are so important that major security vulnerabilities are not allowed. Therefore, countless operation and maintenance professionals are working hard on the battlefield of security attacks and defense, which enables us to enjoy a basic stable modern digital life.</p><p>Now, you have a VPS and will open its data access channel to achieve the goal of traffic forwarding, which means you are now on the front line of the security battle and face all risks. However, at the same time, newcomers tend to have a polarized view of security issues due to lack of knowledge and information: either they feel it is as light as a feather and has nothing to do with them, or they feel it is as heavy as Mount Tai and feel anxious all day long.</p><ul><li><p>For the former, my suggestion is: safety is of utmost importance. Try to gather more information on safety issues to avoid regretting after experiencing losses.</p></li><li><p>For the latter, my suggestion is: don&#39;t worry too much, our servers still don&#39;t have too much value and generally won&#39;t attract high-level attacks. The basic threats we need to face are mostly malicious scans and login attempts from some automated scripts. Just follow this article to do some basic protection.</p></li></ul><h2 id="_4-2-what-are-the-specific-risks" tabindex="-1"><a class="header-anchor" href="#_4-2-what-are-the-specific-risks"><span>4.2 What are the specific risks</span></a></h2><p>Just like the configuration we did in the &quot;Remote Login&quot; section, anyone who knows the four elements of [IP address] + [port] + [username] + [password] can log in to your VPS server. So obviously, the security of these four elements is the bottom line that we need to protect. Let&#39;s analyze them one by one:</p><ol><li><p>[IP Address]: Malicious scripts randomly attempt to scan IP ranges, which can be regarded as public information and cannot be hidden.</p></li><li><p>[Port]: If you are using the default port, then [Port = <code>22</code>].</p></li><li><p>[Username]: If using the default user, then [Username = <code>root</code>]</p></li><li><p>[Password]: There is no default value for the password. It must be randomly generated by the VPS backend or set by you. In other words, if all the settings of your server are default, then three of the four elements are already known. Therefore, the security of your entire server relies on a small password. In this case, there are several situations:</p></li></ol><ul><li><p>If you use a VPS management background to generate passwords randomly, it usually contains random uppercase and lowercase letters, symbols, and is relatively secure.</p></li><li><p>If you changed your password to something super weak like <code>123456</code> just for the sake of easy memorization, hacking into your VPS server would be a piece of cake.</p></li><li><p>If you change your password to a more complex one that you have used elsewhere just for the sake of easy memory, it is not really safe. You should understand that hackers have cheats in their hands, such as <code>password tables</code>, which contain tens of thousands, hundreds of thousands, millions, or even more real leaked passwords.</p></li></ul><ol start="5"><li>But you should understand that no hacker really sits in front of a computer and tries your password repeatedly. All attack attempts are carried out automatically by malicious scripts, which work tirelessly for 24 hours. Perhaps while you are sleeping soundly every night, your server is enduring round after round of attacks.</li></ol><p>Once the password is successfully cracked, it means that all four of your elements have been mastered by the attacker. The malicious script will quickly log in to the server, obtain the highest <code>root</code> control of the server, install and deploy its malicious services, and then use your server to do all kinds of bad things 24 hours a day (such as mining, spreading viruses, sending spam emails, fraudulent emails, acting as a BT relay, and even dark web public nodes, and so on). If the malicious script is relatively restrained, it can actually achieve considerable concealment. Generally, newcomers will not observe and pay attention to indicators such as login records, process changes, CPU usage changes, and traffic changes of the VPS, so it is difficult for you to discover that you have been hacked. Until your VPS service provider blocks your account or you receive a lawyer&#39;s letter.</p><ol start="6"><li>Don&#39;t forget that when you obtain a VPS, you probably need to use your real payment information, and when you log in to various websites and social platforms, your IP address will also be recorded, which has a direct or indirect relationship with your identity. Therefore, once these bad things happen, they will inevitably be associated with you.</li></ol><h2 id="_4-3-what-security-measures-do-we-need-to-take" tabindex="-1"><a class="header-anchor" href="#_4-3-what-security-measures-do-we-need-to-take"><span>4.3 What security measures do we need to take</span></a></h2><p>Based on the above analysis, what we need to do is to strengthen the three elements of [port], [username], and [password] to reduce the risk of being hacked.</p><ol><li>[Port]: Modify the SSH remote login port to a [non-22 port] (4.4).</li><li>[Username]: Create a [non-root] new user and disable root user SSH remote login (4.5, 4.6).</li><li>[Password]: Enable RSA key verification for SSH login and disable password verification login (4.7).</li></ol><p>Remember to follow the order and don&#39;t lock yourself out.</p><h2 id="_4-4-change-the-ssh-remote-login-port-to-a-non-22-port" tabindex="-1"><a class="header-anchor" href="#_4-4-change-the-ssh-remote-login-port-to-a-non-22-port"><span>4.4 Change the SSH Remote Login Port to a Non-22 Port</span></a></h2><p>Now, let&#39;s solve the problem of &quot;port = <code>22</code>&quot;. (Note: some VPS service providers have non-22 ports set as default, so you can ignore this step if that&#39;s the case. Of course, you can also follow this article to change it to another port.)</p><ol><li>Basic commands of Little White Linux:</li></ol><table><thead><tr><th style="text-align:center;">ID</th><th style="text-align:center;">Command Name</th><th style="text-align:center;">Description</th></tr></thead><tbody><tr><td style="text-align:center;"><code>cmd-03</code></td><td style="text-align:center;"><code>nano</code></td><td style="text-align:center;">Text editor</td></tr><tr><td style="text-align:center;"><code>cmd-04</code></td><td style="text-align:center;"><code>systemctl restart</code></td><td style="text-align:center;">Restart a service</td></tr></tbody></table><ol start="2"><li>Basic Configuration Files of Little White Linux</li></ol><table><thead><tr><th style="text-align:center;">Number</th><th style="text-align:center;">Configuration File Location</th><th style="text-align:center;">File Description</th></tr></thead><tbody><tr><td style="text-align:center;"><code>conf-01</code></td><td style="text-align:center;"><code>/etc/ssh/sshd_config</code></td><td style="text-align:center;">SSH Remote Login Program Settings</td></tr></tbody></table><ol start="3"><li>The first thing we need to do, of course, is to [open the SSH remote login program settings with the text editor <code>nano</code>]. In Windows, you will [find the file and double-click] it. What should you do in Linux? Take a close look at the command instructions above, isn&#39;t it simple? Yes, it is:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">nano</span> /etc/ssh/sshd_config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This is a command in the shell terminal to open the <code>sshd_config</code> file located in the <code>/etc/ssh/</code> directory using the <code>nano</code> text editor.</p><ol start="4"><li>Once the file is opened, you will enter the interface of <code>nano</code>. After observing for a while, you will find that it displays important shortcut keys at the bottom of the screen (enclosed in a red box in the figure below). You can take the exam directly without memorizing them, which is very user-friendly, isn&#39;t it?</li></ol><p><img src="`+d+`" alt="Interface of nano"></p><ol start="5"><li>The second thing we need to do is to <strong>find the <code>Port</code> item in the opened file and modify its port</strong>. The number after <code>Port</code> is the SSH port. It is generally recommended to change it to an integer greater than <code>1024</code> and less than <code>65535</code> (this article takes <code>9753</code> as an example). Please think about how to operate it with the shortcut keys of <code>nano</code>. You are right again! It is:</li></ol><ul><li>Use <code>ctrl+w</code> to enter search mode, then type <code>Port 22</code> and press Enter</li><li>Delete <code>22</code> and replace it with <code>9753</code></li><li>Note: If this line starts with <code>#</code>, it means that this line is [commented out] and [does not take effect]. You can write a new line at the end of the file without <code>#</code>, or delete the <code>#</code> to enable this line.</li></ul><div class="custom-container warning"><p class="custom-container-title">Warning</p><p>This article uses <code>9753</code> as an example, which means that with the release of this article, this port will become a feature that may be prioritized or blocked by attackers or the Great Firewall of China. Therefore, I strongly recommend that you use another port that you come up with yourself, after all, you have over 60,000 ports to choose from freely.</p></div><ol start="6"><li>The third thing we need to do is to [save the file and exit].</li></ol><ul><li>If you observed carefully in step 3, you would have noticed that saving is not done by the common <code>ctrl+s</code>.</li><li>The correct shortcut keys: save is <code>ctrl+o</code> + <code>enter</code>, and exit is <code>ctrl+x</code>.</li><li>(For some operating systems) Add a firewall rule to set the new SSH port, otherwise, you won&#39;t be able to log in via SSH after the instance restarts.</li><li>For example, on Ubuntu using ufw.</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> ufw allow <span class="token number">9753</span>/tcp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li>The last thing we need to do is to [restart the SSH service to make the changes take effect].</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl restart <span class="token function">ssh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then you can try opening a new session in your SSH software to check if you can connect. If there are any issues, you can modify the configuration through the old SSH session (SSH connections that are already open will not be closed when restarting sshd).</p><ol start="8"><li>The complete process demonstration is as follows:</li></ol><p><img src="`+h+`" alt="Demonstration of modifying non-22 port"></p><ol start="9"><li>Modify PuTTY Configuration</li></ol><p>&quot;Now that the new port is in effect, you will need to use <code>9753</code> the next time you log in with PuTTY. So please go to the PuTTY settings to change the port number and save the session. Well, you should know where to change it, right? (If you don&#39;t know, you need to reread the previous content!)&quot;</p><h2 id="_4-5-creating-a-new-user-without-root-access" tabindex="-1"><a class="header-anchor" href="#_4-5-creating-a-new-user-without-root-access"><span>4.5 Creating a New User Without Root Access</span></a></h2><p>In the second step, let&#39;s solve the issue of the username being <code>root</code>.</p><p>Firstly, you need to understand that <code>root</code> in Linux system is not just a simple administrator account. It is the foundation of the entire system, the ruler and the supreme god of the system. Once the <code>root</code> account has security issues, the entire system will be vulnerable and there will be nowhere to hide. So, let&#39;s follow me to carry out the operations:</p><ol><li>Little White Linux Basic Commands:</li></ol><table><thead><tr><th style="text-align:center;">Number</th><th style="text-align:center;">Command Name</th><th style="text-align:center;">Command Description</th></tr></thead><tbody><tr><td style="text-align:center;"><code>cmd-05</code></td><td style="text-align:center;"><code>adduser</code></td><td style="text-align:center;">Add new user to the system</td></tr><tr><td style="text-align:center;"><code>cmd-06</code></td><td style="text-align:center;"><code>apt install</code></td><td style="text-align:center;">Install a software package</td></tr><tr><td style="text-align:center;"><code>cmd-07</code></td><td style="text-align:center;"><code>visudo</code></td><td style="text-align:center;">Special editor to modify sudo permission settings</td></tr></tbody></table><ol start="2"><li>The first thing we need to do is to [add a new user and set a login password]. You can choose any name you want, here I will use <code>vpsadmin</code> as an example:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>adduser vpsadmin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This is a command in the shell terminal to add a new user named &quot;vpsadmin&quot;.</p><p>After executing the command, follow the prompts to operate. Be sure to set a user password (remember that you won&#39;t see <code>******</code> when setting the password). Afterwards, the system will ask you for some additional user information, which can be ignored by pressing Enter all the way.</p><p><img src="`+u+'" alt="Creating a new user"></p><div class="custom-container warning"><p class="custom-container-title">Warning</p><p>This article takes &quot;vpsadmin&quot; as an example, which means that with the release of this article, this username will also become a significant feature, and may be the first choice for attackers to try. Therefore, just like ports, I strongly recommend that you use another username that you come up with yourself.</p></div><ol start="3"><li>The complete process demonstration is as follows:</li></ol><p><img src="'+p+`" alt="Creating a new user"></p><ol start="4"><li>The second thing we need to do is to install the <code>sudo</code> function (which allows ordinary accounts to temporarily obtain the power of <code>root</code> at critical moments and unleash their full power to save the world).</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">sudo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This is a shell command to update the package list and install the &quot;sudo&quot; package.</p><p>You may have noticed that this command actually consists of two commands. The first half, <code>apt update</code>, you have seen and used before, is to refresh the software version information on the server. The latter half, <code>apt install</code>, is the installation command that will be used this time. The two commands are connected together to instruct the system to refresh the latest available software and then install the latest version of the <code>sudo</code> program. <code>&amp;&amp;</code> is used to link the two commands together for execution.</p><ol start="5"><li>The third thing we need to do is to add the <code>vpsadmin</code> user to the <code>sudo</code> list, so that they have the privilege to borrow the power of <code>root</code>.</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>visudo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(Note: <code>visudo</code> is a command used in Linux/Unix systems to edit the sudoers file, which specifies which users or groups are allowed to run certain commands with administrative privileges.)</p><p>Simply add the following line under <code>User Privilege Specification</code>: <code>vpsadmin ALL=(ALL) NOPASSWD: ALL</code>.</p><div class="custom-container warning"><p class="custom-container-title">Warning</p><p>I want to specifically explain the setting of <code>NOPASSWD</code>. It means that when the <code>vpsadmin</code> user temporarily uses the <code>root</code> permission, no additional password needs to be entered. This is contrary to general security recommendations. The reason why I recommend this is that many newcomers insist on using the <code>root</code> account because they feel relaxed when using <code>root</code> without repeatedly entering passwords. &quot;Choosing the lesser of two evils,&quot; I believe that the risk of [directly using the <code>root</code> user] is greater than the risk of [not entering a password when using <code>sudo</code>], so I made the above suggestion.</p><p>If you want to follow the traditional practice and enter a password every time you use <code>sudo</code>, then you can change this line to <code>vpsadmin ALL=(ALL:ALL) ALL</code>.</p><ol start="6"><li>The complete process demonstration is as follows:</li></ol><p><img src="`+m+`" alt="Creating a new user"></p><h2 id="_4-6-disabling-ssh-remote-login-for-root-user" tabindex="-1"><a class="header-anchor" href="#_4-6-disabling-ssh-remote-login-for-root-user"><span>4.6 Disabling SSH Remote Login for Root User</span></a></h2><ol><li>Now that you&#39;re gradually getting familiar with Linux, it&#39;s time for you to think. What&#39;s the first thing we need to do? That&#39;s right, it&#39;s still to use the <code>nano</code> editor to open the <code>SSH remote login program settings</code>. What? You can&#39;t remember how to do it? Then go back and review the content above and come back! ............ Correct answer:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">nano</span> /etc/ssh/sshd_config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This is a command line instruction to open and edit the <code>sshd_config</code> file located at <code>/etc/ssh/</code> using the <code>nano</code> text editor.</p><ol start="2"><li>Find the line <code>PermitRootLogin Yes</code>, and change the value after it to <code>no</code>. Do you remember how to do it? ............ Correct answer:</li></ol><ul><li>Use <code>ctrl+w</code> to enter search mode, then enter <code>PermitRootLogin</code> and press enter.</li><li>Delete <code>yes</code> and change it to <code>no</code>.</li></ul><ol start="3"><li>Save the file and exit. Do you remember how to do it? ............ Correct answer: N/A (The correct answer is not provided in the given text.)</li></ol><ul><li>Save is <code>ctrl+o</code>, then press <code>Enter</code> to confirm.</li><li>Exit is <code>ctrl+x</code>.</li></ul><ol start="4"><li>Restart the ssh service to make the changes take effect. Do you remember...? Never mind, let&#39;s just reveal the correct answer:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>systemctl restart <span class="token function">ssh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(This is a Linux shell command to restart the SSH service.)</p><ol start="5"><li>The complete process is demonstrated as follows:</li></ol><p><img src="`+g+'" alt="Disable SSH remote login for root user"></p><ol start="6"><li>Next time you log in remotely via SSH using PuTTY, you will no longer be able to connect as the <code>root</code> user. You will need to use the username <code>vpsadmin</code> instead. For convenience, you can set <code>vpsadmin</code> as the default login username in PuTTY. (Tip: Don&#39;t forget to save the session.)</li></ol><p><img src="'+y+'" alt="PuTTY Setting Default User Name"></p><h2 id="_4-7-login-with-rsa-key-and-disable-password-login" tabindex="-1"><a class="header-anchor" href="#_4-7-login-with-rsa-key-and-disable-password-login"><span>4.7 Login with RSA Key and Disable Password Login</span></a></h2><p>In the third step, we will solve the problem of the password being cracked.</p><p>As mentioned earlier, hackers are not foolish enough to crack your password by brute force, but rather they use cheating methods such as &quot;password tables&quot;. Unless you use a randomly generated super long password (such as with 1Password, or macOS keychain and other password management tools), it&#39;s easy to fall victim to this.</p><p>Although a very long random password can improve security, it is usually difficult to remember and manually enter, which can also lead to mistakes. To solve this problem, we can simply abandon the &quot;password verification&quot; method and switch to a more secure &quot;key verification&quot; method.</p><p>The so-called &quot;key authentication&quot; refers to generating a pair of related key files (public key and private key), uploading the &quot;public key&quot; to the VPS for backup. Each time you log in, SSH will match the &quot;public key&quot; and &quot;private key&quot;. If the verification is correct, the &quot;key pair&quot; will be verified and the authentication will pass. (In other words, you don&#39;t need to remember and enter complex passwords, just protect the &quot;private key&quot; file from being leaked.)</p><div class="custom-container warning"><p class="custom-container-title">Warning</p><p>This article uses <code>RSA</code> keys as an example because <code>RSA</code> keys have a long history of support in various devices and <code>SSH</code> clients and can still provide sufficient security. However, it is not the only choice available.</p><p>Other common keys include:</p><ul><li><code>DSA</code> - It has been mathematically proven to be insecure, so never use it.</li><li><code>ECDSA</code> - It has high security with small keys, but its algorithm is suspected to have a backdoor by the NSA. If there is something on your VPS that is worth the attention of the NSA, do not use it.</li><li><code>Ed25519</code> - This is an algorithm that is very similar to <code>ECDSA</code>, and it has similar performance advantages. At the same time, all of its documentation is public, so it is generally considered to be free of backdoors.</li></ul><p>So, if your device and software both support it, I recommend choosing <code>Ed25519</code> keys as a priority.</p></div></div><p>Now let&#39;s configure the [Key Authentication]!</p><ol><li><p>Run <code>PuTTYgen</code> (PuTTY Key Generator). The location is <code>Start Menu</code> --&gt; <code>All Programs</code> --&gt; <code>PuTTY (64-bit)</code> --&gt; <code>PuTTYgen</code>.</p></li><li><p>Click on <code>Generate</code> to start the generation process (move the mouse randomly in the blank area of the interface to add random numbers).</p></li></ol><p><img src="'+f+'" alt="Generate Key"></p><div class="custom-container warning"><p class="custom-container-title">Warning</p><p>The example in this image is based on a <code>2048</code>-bit <code>RSA</code> key. However, in reality, if you want to achieve the same level of security as a <code>256</code>-bit key for <code>EDCSA/Ed25519</code>, you need to use a <code>3072</code>-bit <code>RSA</code> key. (i.e., change the number in the bottom right corner to <code>3072</code>)</p></div><ol start="2"><li>You can add a password to your private key to increase security.</li><li>Click on <code>Save public key</code> to save the public key with the file name <code>id_rsa.pub</code>.</li><li>Click on <code>Save private key</code> to save the private key with the file name <code>id_rsa</code> (PuTTY private keys come with the <code>.ppk</code> extension).</li><li>Most importantly, copy and save all the content inside the red box below by scrolling down, with the file name <code>authorized_keys</code>. (If you save it using vscode, it will be saved as a text file with a <code>.txt</code> extension, which is fine. We will remove the extension when uploading it to VPS later.)</li></ol><p><img src="'+w+'" alt="Save Key"></p><ol start="2"><li>Upload the public key to the &quot;vpsadmin&quot; user on the VPS.</li></ol><p>1, This step requires the use of the previously prepared <code>WinSCP</code>.</p>',70),H={href:"https://winscp.net/eng/index.php",target:"_blank",rel:"noopener noreferrer"},N=a('<p><img src="'+v+'" alt="One-click Import Session"></p><p>3, If there is no prompt for import or you have already installed it in advance, configure it according to the following figure.</p><p><img src="'+b+'" alt="WinSCP login settings"></p><p>4, The directory on the left side of WinSCP is the folder and files on your local computer. Please locate the folder where the key is stored.</p><p>5, The directory on the right side of WinSCP is the folder and files on the VPS server, which are located in the <code>/home/vpsadmin/</code> folder by default. To display hidden files, please click on <code>X hidden</code> in the lower right corner.</p><p><img src="'+k+'" alt="Local and remote folders"></p><p>6, Right-click on the right side (in VPS) and create a new folder named <code>.ssh</code> (note the period at the beginning).</p><p><img src="'+S+'" alt="Create a folder to place public key in VPS"></p><p>7, Upload the [public key] <code>authorized_keys</code> to the <code>.ssh</code> folder.</p><p><img src="'+x+'" alt="Upload authorized_keys"></p><p>8, When uploading, rename the [public key] from <code>authorized_keys.txt</code> to <code>authorized_keys</code> (remove the <code>.txt</code> extension).</p><p><img src="'+T+'" alt="Ensure there is no file extension"></p><p>9, The complete process demonstration is as follows:</p><p><img src="'+_+`" alt="Complete demonstration of WinSCP operation"></p><ol start="3"><li>Enable RSA key authentication for SSH login and disable password authentication login on the VPS side.</li></ol><ul><li>Basic Linux Commands: <table><thead><tr><th style="text-align:center;">Number</th><th style="text-align:center;">Command</th><th style="text-align:center;">Description</th></tr></thead><tbody><tr><td style="text-align:center;"><code>cmd-08</code></td><td style="text-align:center;"><code>sudo</code></td><td style="text-align:center;">Run a command with <code>root</code> privileges</td></tr><tr><td style="text-align:center;"><code>cmd-09</code></td><td style="text-align:center;"><code>chmod</code></td><td style="text-align:center;">Change the permissions of a target file/directory</td></tr></tbody></table></li><li>SSH remote connection to VPS (PuTTY)</li><li>Change the permission of the <code>authorized_keys</code> file to <code>600</code> (only the owner can read and write).</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorized_keys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This is a command in shell script to change the permissions of the <code>authorized_keys</code> file to <code>600</code> for the current user&#39;s SSH directory (<code>~/.ssh/</code>).</p><ol start="4"><li>Modify SSH configuration. We have used this many times, but now that we have changed from the almighty <code>root</code> to the ordinary user <code>vpsadmin</code>, we do not have the permission to edit SSH configuration directly. At this time, we need to use the <code>sudo</code> command:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /etc/ssh/sshd_config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(This is a command in the shell/terminal to open the sshd_config file located in the /etc/ssh/ directory with the sudo privilege using the nano text editor.)</p><ol start="5"><li><p>Find (<code>ctrl+w</code>) <code>PasswordAuthentication</code> and change it to <code>no</code>.</p></li><li><p>Find (<code>ctrl+w</code>) <code>PubkeyAuthentication</code>, change it to <code>yes</code>, then save (<code>ctrl+o</code>) and exit (<code>ctrl+x</code>).</p></li><li><p>Restart the SSH service. (Note: Don&#39;t forget to use <code>sudo</code> to gain permission.)</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart <span class="token function">ssh</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This is a command in the shell terminal to restart the SSH service with root privileges using the <code>systemctl</code> command.</p><ol start="8"><li>The complete process is as follows:</li></ol><p><img src="`+P+'" alt="Enable SSH key verification and disable password verification"></p><ol start="4"><li>The public key has been set up on the VPS end. Now we need to specify the private key location for PuTTY to use when logging in. (Reminder: Don&#39;t forget to save the session.)</li></ol><p><img src="'+I+'" alt="Specify private key location in PuTTY"></p><ol start="5"><li>Now, the [Key-based login] has been successfully enabled, [Password authentication] has been successfully disabled, and the default login username and private key have been saved for PuTTY. In the future, when using PuTTY to log in, simply load the <code>VPS-SERVER</code> configuration, click <code>Open</code>, and you can log in with just one click.</li></ol><p>If you have set a password for your private key, you need to enter this password to use the key when logging in, as shown in the following figure:</p><p><img src="'+A+'" alt="Enter Private Key Password"></p><ol start="6"><li>Don&#39;t forget to set the corresponding key for <code>WinSCP</code>, otherwise you won&#39;t be able to log in when you want to transfer files later.</li></ol><p><img src="'+C+'" alt="WinSCP Specify Private Key Location"></p><div class="custom-container warning"><p class="custom-container-title">Warning</p><p>Any software that requires SSH login needs key verification. As there are too many software, it is impossible to show them one by one. Please set it up according to your needs.</p></div><h2 id="_4-8-your-progress" tabindex="-1"><a class="header-anchor" href="#_4-8-your-progress"><span>4.8 Your Progress</span></a></h2><p>Up to this point, your VPS has completed the basic security measures of [port], [username], and [password]. Although it is not completely impregnable, most malicious scripts should no longer be able to harm you.</p><p>Now that we finally have a secure system foundation, in the next chapter, we can start step by step to install and configure the infrastructure that Xray needs! (What infrastructure? A web page, a certificate)</p><blockquote><p>⬛⬛⬛⬛⬜⬜⬜⬜ 50%</p></blockquote>',38);function D(W,V){const i=t("I18nTip"),n=t("ExternalLinkIcon");return l(),c("div",null,[o(i),q,s("p",null,[e("2, Go to the "),s("a",H,[e("official website"),o(n)]),e(" to download and install. It will prompt you to import PuTTY settings, and of course, you can import them with one click!")]),N])}const R=r(L,[["render",D],["__file","ch04-security.html.vue"]]);export{R as default};
