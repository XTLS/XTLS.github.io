import{_ as c,r as o,o as d,c as p,a as e,b as s,d as n,w as r,e as a}from"./app-D_yyvImn.js";const u="/assets/ch07-img01-xray-install-6RUithnp.gif",v="/assets/ch07-img02-xray-cert-install-BVo1KeA2.png",m="/assets/ch07-img03-crontab-cert-renew-B_dwSLtg.gif",b="/assets/ch07-img04-xray-log-and-config-BP5ccZ8k.gif",h="/assets/ch07-img05-xray-start-and-status-Cl6yKbrT.gif",g="/assets/ch07-img06-bbr-proper-BpzfpFMr.gif",k="/assets/ch07-img07-http-to-https-QYIcd_gO.gif",y="/assets/ch07-img08-http-to-https-check-7ZPa5fw-.png",x={},q=a('<h1 id="【第-7-章】xray-服务器篇" tabindex="-1"><a class="header-anchor" href="#【第-7-章】xray-服务器篇"><span>【第 7 章】Xray 服务器篇</span></a></h1><h2 id="_7-1-博观而约取-厚积而薄发" tabindex="-1"><a class="header-anchor" href="#_7-1-博观而约取-厚积而薄发"><span>7.1 博观而约取，厚积而薄发</span></a></h2><p>本文撰写过程中，大佬开玩笑的吐槽到：你这教程，居然连载了 6 章都还没到 Xray，不知道的还以为你是“手把手教你建网站”教程呢。（我竟无法反驳.jpg!）</p><p>其实这样的结构是我多番思考之后的决定，毕竟只有打好基础，才能在后面事半功倍快速反超。我在群里看到许多新人连<code>nano</code>都无法正确使用，也不会用<code>WinSCP</code>，远程手写编辑出来的<code>config.json</code>自然错误百出，连查错也变得举步维艰。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>经过了前 6 章的准备，各位已经跟我一起翻越了 Linux 基本操作、VPS 远程管理、网页搭建、域名管理、证书申请等等几座大山。是不是回头看看，觉得其实非常简单呢？现在我们有了如此扎实的准备，接下来安装和配置 Xray 时会有一种【水到渠成】的轻快感觉。</p></div><p>后面要做的事情非常简单：</p><ol><li>安装</li><li>配置（如安装 TLS 证书、<code>config.json</code>）</li><li>运行</li><li>优化（如更新内核、开启<code>bbr</code>、网站<code>http</code>访问自动跳转<code>https</code>等）</li></ol><h2 id="_7-2-安装-xray" tabindex="-1"><a class="header-anchor" href="#_7-2-安装-xray"><span>7.2 安装 Xray</span></a></h2>',8),_={href:"https://github.com/XTLS/Xray-core",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"MPL 2.0",-1),X={href:"https://github.com/XTLS/Xray-install",target:"_blank",rel:"noopener noreferrer"},B=s("strong",null,"本文使用的是【非 root 用户】安装模式",-1),w=a(`<p>写本文时，安装脚本在使用非 root 账户时有一些小 bug，所以我决定正好把这几步分开操作，可以顺便说明一下 Linux 下的删除命令。</p><ol><li><p>小小白白 Linux 基础命令：</p><table><thead><tr><th style="text-align:center;">编号</th><th style="text-align:center;">命令名称</th><th style="text-align:center;">命令说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>cmd-14</code></td><td style="text-align:center;"><code>rm</code></td><td style="text-align:center;">删除命令</td></tr></tbody></table></li><li><p>将安装脚本下载至本地：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/XTLS/Xray-install/raw/main/install-release.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>执行安装命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">bash</span> install-release.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用完成之后可以删除该脚本</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">rm</span> ~/install-release.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>使用 <code>rm</code> 命令删除文件的时候，默认其实就是删除现在所在的文件夹下的文件。但是，<strong>我依然写了完整的路径</strong>： <code>~/install-release.sh</code>，这是我使用 <code>rm</code> 时的一个安全习惯、也是我把安装分成几步之后想强调一下的内容。如果你听过一些“程序员从删库到跑路”之类的段子，大概就知道为什么了。</p></div></li><li><p>完整流程演示如下：</p><p><img src="`+u+'" alt="Xray服务器端安装流程演示"></p></li></ol><h2 id="_7-3-给-xray-配置-tls-证书" tabindex="-1"><a class="header-anchor" href="#_7-3-给-xray-配置-tls-证书"><span>7.3 给 Xray 配置 TLS 证书</span></a></h2>',3),S={href:"https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E#3-copy%E5%AE%89%E8%A3%85-%E8%AF%81%E4%B9%A6",target:"_blank",rel:"noopener noreferrer"},L=s("code",null,"acme.sh",-1),R=s("code",null,"--install-cert",-1),T=s("code",null,"xray-core",-1),D=a(`<li><p>为了规避非 root 账户的各种潜在的权限困扰，我们在 vpsadmin 账户下建立一个证书文件夹</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> ~/xray_cert
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用<code>acme.sh</code>的<code>--install-cert</code>正确安装（拷贝）证书文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>acme.sh --install-cert <span class="token parameter variable">-d</span> 二级域名.你的域名.com <span class="token parameter variable">--ecc</span> <span class="token punctuation">\\</span>
            --fullchain-file ~/xray_cert/xray.crt <span class="token punctuation">\\</span>
            --key-file ~/xray_cert/xray.key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>xray.key</code>文件默认对其他用户不可读，所以需要赋予其可读性权限</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +r ~/xray_cert/xray.key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>过程比较简单就不放动图了：</p><p><img src="`+v+'" alt="Xray服务器端安装流程演示"></p></li>',4),E=a('<p><code>acme.sh</code> 会每 60 天检查一次证书并自动更新临期证书。但据我所知是它并不会自动将新证书安装给 <code>xray-core</code>，所以我们需要新增一个系统的自动周期任务来完成这一步。</p><ol><li>小小白白 Linux 基础命令：</li></ol><table><thead><tr><th style="text-align:center;">编号</th><th style="text-align:center;">命令名称</th><th style="text-align:center;">命令说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>cmd-15</code></td><td style="text-align:center;"><code>crontab -e</code></td><td style="text-align:center;">编辑当前用户的定时任务</td></tr></tbody></table>',3),P={start:"2"},I=a(`<li><p>建立一个脚本文件（<code>xray-cert-renew.sh</code>）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">nano</span> ~/xray_cert/xray-cert-renew.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,1),N=a(`<p>把下面的内容复制进去，记得替换你的真实域名，然后保存退出</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

/home/vpsadmin/.acme.sh/acme.sh --install-cert <span class="token parameter variable">-d</span> a-name.yourdomain.com <span class="token parameter variable">--ecc</span> --fullchain-file /home/vpsadmin/xray_cert/xray.crt --key-file /home/vpsadmin/xray_cert/xray.key
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Xray Certificates Renewed&quot;</span>

<span class="token function">chmod</span> +r /home/vpsadmin/xray_cert/xray.key
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Read Permission Granted for Private Key&quot;</span>

<span class="token function">sudo</span> systemctl restart xray
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Xray Restarted&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),j={class:"custom-container warning"},V=s("p",{class:"custom-container-title"},"注意",-1),U=s("code",null,"acme.sh",-1),C=s("code",null,"reloadcmd",-1),F=s("code",null,"Xray",-1),A=s("code",null,"crontab",-1),K=s("code",null,"crontab",-1),H=s("code",null,"Xray",-1),M=s("code",null,"reloadcmd",-1),Z=s("code",null,"acme.sh",-1),$={href:"https://github.com/acmesh-official/acme.sh",target:"_blank",rel:"noopener noreferrer"},z=s("p",null,[n("另外，录制动图时，脚本中没有加入重启 "),s("code",null,"Xray"),n(" 的命令，是因为 "),s("code",null,"Xray"),n(" 计划支持【证书热更新】功能，即 "),s("code",null,"Xray"),n(" 会自动识别证书更新并重载证书、无需手动重启。待功能加入后，我将适当修改 "),s("code",null,"config.json"),n(" 开启此设置，并删除脚本中的重启命令。")],-1),G=a(`<li><p>给这个文件增加【可执行】权限</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>chmod +x ~/xray_cert/xray-cert-renew.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>运行 <code>crontab -e</code>，添加一个自动任务【每月自动运行一次<code>xray-cert-renew.sh</code>】 (注意不要加<code>sudo</code>，因为我们增加的是<code>vpsadmin</code> 账户的自动任务。初次运行时会让你选择编辑器，当然是选择熟悉的<code>nano</code>啦！)</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">crontab</span> <span class="token parameter variable">-e</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>把下面的内容增加在文件最后，保存退出即可。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># 1:00am, 1st day each month, run \`xray-cert-renew.sh\`
0 1 1 * *   bash /home/vpsadmin/xray_cert/xray-cert-renew.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>完整流程演示如下：</p><p><img src="`+m+'" alt="每月自动给Xray安装证书"></p></li>',4),O=s("h2",{id:"_7-4-配置-xray",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_7-4-配置-xray"},[s("span",null,"7.4 配置 Xray")])],-1),Q={href:"https://github.com/XTLS/Xray-examples",target:"_blank",rel:"noopener noreferrer"},W=s("code",null,"VLESS",-1),Y=s("code",null,"80",-1),J=a(`<ol><li><p>生成一个合法的 <code>UUID</code> 并保存备用（<code>UUID</code>可以简单粗暴的理解为像指纹一样几乎不会重复的 ID）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>xray uuid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>建立日志文件及文件夹备用</p><ol><li><p>小小白白 Linux 基础命令：</p><table><thead><tr><th style="text-align:center;">编号</th><th style="text-align:center;">命令名称</th><th style="text-align:center;">命令说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>cmd-16</code></td><td style="text-align:center;"><code>touch</code></td><td style="text-align:center;">建立空白文件</td></tr></tbody></table></li><li><p>在<code>vpsadmin</code>的文件夹内建立一个【日志专用文件夹】</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> ~/xray_log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>生成所需的两个日志文件（访问日志、错误日志）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">touch</span> ~/xray_log/access.log <span class="token operator">&amp;&amp;</span> <span class="token function">touch</span> ~/xray_log/error.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>这个位置不是<code>Xray</code>标准的日志文件位置，放在这里是避免权限问题对新人的操作带来困扰。当你熟悉之后，建议回归默认位置： <code>/var/log/xray/access.log</code> 和 <code>/var/log/xray/error.log</code> 。</p></div></li><li><p>因为 Xray 默认是 nobody 用户使用，所以我们需要让其他用户也有“写”的权限（<code>*.log</code> 就是所有文件后缀是<code>log</code>的文件，此时<code>CLI</code>界面的效率优势就逐渐出现了）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">chmod</span> a+w ~/xray_log/*.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol></li><li><p>使用<code>nano</code>创建<code>Xray</code>的配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /usr/local/etc/xray/config.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将下面的文件全部复制进去，并将之前生成的<code>UUID</code>填入第 61 行 <code>&quot;id&quot;: &quot;&quot;,</code> 之中。（填好之后的样子是 <code>&quot;id&quot;: &quot;uuiduuid-uuid-uuid-uuid-uuiduuiduuid&quot;</code> ），本文的这个配置文件中增加了我的各种啰嗦注解，以方便你理解每一个配置模块的功能是什么。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token comment">// REFERENCE:</span>
<span class="token comment">// https://github.com/XTLS/Xray-examples</span>
<span class="token comment">// https://xtls.github.io/config/</span>
<span class="token comment">// 常用的 config 文件，不论服务器端还是客户端，都有 5 个部分。外加小小白解读：</span>
<span class="token comment">// ┌─ 1*log 日志设置 - 日志写什么，写哪里（出错时有据可查）</span>
<span class="token comment">// ├─ 2_dns DNS-设置 - DNS 怎么查（防 DNS 污染、防偷窥、避免国内外站匹配到国外服务器等）</span>
<span class="token comment">// ├─ 3_routing 分流设置 - 流量怎么分类处理（是否过滤广告、是否国内外分流）</span>
<span class="token comment">// ├─ 4_inbounds 入站设置 - 什么流量可以流入 Xray</span>
<span class="token comment">// └─ 5_outbounds 出站设置 - 流出 Xray 的流量往哪里去</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 1\\_日志设置</span>
  <span class="token property">&quot;log&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;loglevel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;warning&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 内容从少到多: &quot;none&quot;, &quot;error&quot;, &quot;warning&quot;, &quot;info&quot;, &quot;debug&quot;</span>
    <span class="token property">&quot;access&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/home/vpsadmin/xray_log/access.log&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 访问记录</span>
    <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/home/vpsadmin/xray_log/error.log&quot;</span> <span class="token comment">// 错误记录</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 2_DNS 设置</span>
  <span class="token property">&quot;dns&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;servers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;https+local://1.1.1.1/dns-query&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 首选 1.1.1.1 的 DoH 查询，牺牲速度但可防止 ISP 偷窥</span>
      <span class="token string">&quot;localhost&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 3*分流设置</span>
  <span class="token property">&quot;routing&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;domainStrategy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;IPIfNonMatch&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 3.1 防止服务器本地流转问题：如内网被攻击或滥用、错误的本地回环等</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;field&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;ip&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">&quot;geoip:private&quot;</span> <span class="token comment">// 分流条件：geoip 文件内，名为&quot;private&quot;的规则（本地）</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;outboundTag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;block&quot;</span> <span class="token comment">// 分流策略：交给出站&quot;block&quot;处理（黑洞屏蔽）</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token comment">// 3.2 防止服务器直连国内</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;field&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;ip&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;geoip:cn&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;outboundTag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;block&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// 3.3 屏蔽广告</span>
      <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;field&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;domain&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token string">&quot;geosite:category-ads-all&quot;</span> <span class="token comment">// 分流条件：geosite 文件内，名为&quot;category-ads-all&quot;的规则（各种广告域名）</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;outboundTag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;block&quot;</span> <span class="token comment">// 分流策略：交给出站&quot;block&quot;处理（黑洞屏蔽）</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 4*入站设置</span>
  <span class="token comment">// 4.1 这里只写了一个最简单的 vless+xtls 的入站，因为这是 Xray 最强大的模式。如有其他需要，请根据模版自行添加。</span>
  <span class="token property">&quot;inbounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token number">443</span><span class="token punctuation">,</span>
      <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vless&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;settings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;clients&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 填写你的 UUID</span>
            <span class="token property">&quot;flow&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xtls-rprx-vision&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vpsadmin@yourdomain.com&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">&quot;decryption&quot;</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;fallbacks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            <span class="token property">&quot;dest&quot;</span><span class="token operator">:</span> <span class="token number">80</span> <span class="token comment">// 默认回落到防探测的代理</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;streamSettings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;network&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;security&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tls&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;tlsSettings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;alpn&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http/1.1&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;certificates&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
              <span class="token property">&quot;certificateFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/home/vpsadmin/xray_cert/xray.crt&quot;</span><span class="token punctuation">,</span>
              <span class="token property">&quot;keyFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/home/vpsadmin/xray_cert/xray.key&quot;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 5*出站设置</span>
  <span class="token property">&quot;outbounds&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 5.1 第一个出站是默认规则，freedom 就是对外直连（vps 已经是外网，所以直连）</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;direct&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;freedom&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 5.2 屏蔽规则，blackhole 协议就是把流量导入到黑洞里（屏蔽）</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;tag&quot;</span><span class="token operator">:</span> <span class="token string">&quot;block&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;blackhole&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><ol start="5"><li>完整流程演示如下： <img src="`+b+`" alt="创建日志文件及配置文件"></li></ol><h2 id="_7-5-启动-xray-服务-并查看服务状态" tabindex="-1"><a class="header-anchor" href="#_7-5-启动-xray-服务-并查看服务状态"><span>7.5 启动 Xray 服务！！（并查看服务状态）</span></a></h2><p>如果你是跟随本文一步步设置过来，其实就已经避开了最常见<strong>日志文件权限不足</strong>、<strong>证书文件权限不足</strong> 这两个大坑。那么现在运行<code>Xray</code>自然应该无比顺利。</p><ol><li>输入下面的命令，享受启动<code>Xray</code>的历史性时刻吧！！！</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start xray
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>仅仅<code>start</code>我们并不能确定是否成功的开启了 Xray 的服务，要确定它的状态，就要用到下面的命令。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl status xray

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>看到那个绿色的、令人愉悦的 <code>active (running)</code> 了吗？它就是说 <code>Xray</code> 已经在正确的运行了</p><ol start="3"><li>完整流程演示如下：</li></ol><p><img src="`+h+`" alt="启动并查看Xray运行状态"></p><h2 id="_7-6-回顾-systemd-进行基本的服务管理" tabindex="-1"><a class="header-anchor" href="#_7-6-回顾-systemd-进行基本的服务管理"><span>7.6 回顾 <code>systemd</code> 进行基本的服务管理</span></a></h2><p>到现在为止，我们已经使用过了<code>systemctl</code>相关的<code>start</code>, <code>status</code>, <code>reload</code> 等命令，这些都是基于<code>systemd</code>管理模块对 Linux 系统中各种服务进行管理的通用命令。现在正好熟悉一下相关的其他几个命令。</p><ol><li>若你需要暂时关闭 <code>Xray</code> 的服务，那就用<code>stop</code>命令</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl stop xray
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>若你需要重启<code>Xray</code>的服务，那就用<code>restart</code>命令</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart xray
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>若你需要禁用<code>Xray</code>的服务（电脑重启后禁止 Xray 自动运行），那就用<code>disable</code>命令</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl disable xray
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>若你需要启用<code>Xray</code>的服务（电脑重启后确保 Xray 自动运行），那就用<code>enable</code>命令</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> xray
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_7-7-服务器优化之一-开启-bbr" tabindex="-1"><a class="header-anchor" href="#_7-7-服务器优化之一-开启-bbr"><span>7.7 服务器优化之一：开启 BBR</span></a></h2><ol><li>传说中的<code>BBR</code></li></ol><p>我相信，你在搜索各种科学上网技术的时候，肯定不止一次的听过<code>bbr</code>这个东西，在各种博客添油加醋之下，让人觉得它神乎其神。更有<code>bbrplus</code>, <code>bbr2</code>, <code>魔改bbr</code> 等一大堆衍生品。仿佛神油一般，用了就能野鸡线路变专线。</p><p>那么，这东西究竟是什么？它有没有用？又该用哪一个版本呢？</p><ol start="2"><li>实际的<code>BBR</code></li></ol><p><strong>BBR</strong> = <strong>B</strong>ottleneck <strong>B</strong>andwidth and <strong>R</strong>ound-trip propagation time，是一种 TCP 的<strong>拥塞控制算法</strong>。简单粗暴的理解就是<strong>数据流量的交通管理</strong> ：当公路不再塞车的时候，每辆车自然就能保持较快的车速了。</p><p>那么它有没有用呢？一般而言，<code>有BBR</code> 和 <code>没有BBR</code> 会有可以感知的差别（速度、稳定性、延迟方面都会有一些改善），所以 <strong>【非常建议开启 <code>BBR</code>】</strong>。</p><p>但开启之后，<code>BBR</code> 在 <code>4.x</code> 和 <code>5.x</code> 之间的差异往往比较微妙、见仁见智，造成体验差别的决定性因素仍然是线路质量。所以 <strong>【不必纠结版本、不必盲目追新、跟随你的发行版更新内核即可】</strong></p><ol start="3"><li><code>bbrplus</code>, <code>bbr2</code>, <code>魔改bbr</code> 和其他各种听起来就酷炫的版本是不是更好？</li></ol><p>一句话：<strong>不是！不要用这些！这些都为了吸引眼球乱起的名字！</strong></p><p><code>BBR</code> 的更新和发布，都是跟随 Linux 的内核（<code>Kernel</code>）进行的。换言之，只要你用的是比较新的内核，就自然会使用到新版<code>BBR</code>。</p><p>而这些名字看起来很酷炫的东西，说白了就是仍未正式发布的、尚在测试阶段的内核及其对应的<code>BBR</code>版本。这些脚本也仅仅就是通过下载预览版的内核（甚至第三方魔改内核）来率先开启而已。</p><p>内核的稳定是一台服务器稳定运行的基石。<strong>【BBR 测试版带来的细微性能差异绝对不值得更换不稳定的内核。】</strong> 请选择你所在的 Linux 发行版所支持的最新内核，这样可以最大限度的保持服务器的长期稳定和兼容。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>所谓魔改<code>bbr</code>的【领先】是有非常强的时效性的。比如很多 <code>bbrplus</code> 脚本，因为几年来都没有更新，到现在还会把你的内核换成 <code>4.19</code>，要知道现在稳定如 Debian 已经是 <code>5.9</code> 的时代了，那么这个脚本放在 2018 年 1 月也许领先了一点，到 2018 年 10 月 4.19 正发布时就已经失去了意义，放在现在甚至可以说是完完全全的【降级】和【劣化】</p></div><ol start="4"><li><code>fq</code>, <code>fq_codel</code>, <code>fq_pie</code>, <code>cake</code>和其他算法哪个好？</li></ol><p>一句话：<strong>看不懂的话，请保持<code>fq</code>，足够、且不会劣化你的线路</strong></p><ol start="5"><li>锐速、Finalspeed、LotServer 和其他“加速工具”</li></ol><p>一句话：<strong>不要用这些！把他们丢进历史的垃圾桶吧！</strong></p><p>它能解决的也只有丢包率的问题。不太准确的比喻，就是本来你用一辆车送你的货，有时候车半路就坏了（丢包），用了这些以后，你直接派出 3 份一样的货，让三辆车同时送，只要有一辆没坏就能送到。马路上都是你的车，自然就能把别人挤下去。但可想而知，你挤别人的时候，别人也会来挤你，而整个机房的出口道路一共就那么宽，最终势必就变成集体大堵车了。</p><div class="custom-container warning"><p class="custom-container-title">说明</p><p>它们的原理不是算法优化、不是提速、大多数是简单粗暴的<strong>多倍发包</strong>。对于【丢包率非常高】的差线路可能有一点作用，但【对丢包率低的好线路没有任何优化作用，反而会成倍的消耗你的流量】，进而造成服务器和你的邻居不必要的压力。</p><p>如果你的线路真的丢包率奇高，真正靠谱的解决方案是【换线路】。</p></div><ol start="6"><li><p>啰嗦了这么多，就是因为围绕 <code>BBR</code> 忽悠小白的错误概念和坑人脚本实在是太多了。我希望你们现在对 <code>BBR</code> 有了相对清晰的理解。接下来，我们就动手安装最新的 Debian 内核并开启<code>BBR</code> 吧！（真的很简单）</p></li><li><p>给 Debian 10 添加官方 <code>backports</code> 源，获取更新的软件库</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /etc/apt/sources.list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">说明</p><p>本文以 Debian 10 为例，所以使用 <code>/etc/apt/sources.list</code> 仍无问题，但如果你并不是根据本文从头开始，或者使用了其他 Linux 发行版，那么建议你建立 <code>/etc/apt/sources.list.d/</code> 文件夹，并在这个文件夹内建立自己的配置文件，形如 <code>/etc/apt/sources.list.d/vpsadmin.list</code> ，以此保证兼容性，也可避免默认文件在不可预见的情况下被覆盖而导致配置丢失。</p></div><ol start="2"><li>然后把下面这一条加在最后，并保存退出。</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>deb http://archive.debian.org/debian buster-backports main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>刷新软件库并查询 Debian 官方的最新版内核并安装。请务必安装你的 VPS 对应的版本（本文以比较常见的【amd64】为例）。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token parameter variable">-t</span> buster-backports <span class="token function">install</span> linux-image-amd64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>如果你的 VPS 支持，可以尝试【云服务器专用内核】<code>linux-image-cloud-amd64</code>，优点就是精简、资源占用低，缺点嘛是有同学反馈不支持的系统强行安装会导致无法开机（Kernel 无法识别）。</p><p>为了避免无法识别的悲剧，请确保：</p><ul><li>尝试前做一个系统快照，或者</li><li>你有 <code>vnc</code> 可以救场（并且你知道怎么用）</li></ul></div><ol start="4"><li>修改 <code>kernel</code> 参数配置文件 <code>sysctl.conf</code> 并指定开启 <code>BBR</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /etc/sysctl.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">说明</p><p>本文以 Debian 10 为例，所以使用 <code>/etc/sysctl.conf</code> 仍无问题，但如果你并不是跟着本文从头开始，或者使用了其他 Linux 发行版，那么建议你建立 <code>/etc/sysctl.d/</code> 文件夹，并在这个文件夹内建立自己的配置文件，形如 <code>/etc/sysctl.d/vpsadmin.conf</code>，以此保证兼容性，因为部分发行版在 <code>systemd</code> 207 版本之后便不再从 <code>/etc/sysctl.conf</code> 读取参数。使用自定义配置文件也可避免默认文件在不可预见的情况下被覆盖而导致配置丢失。</p></div><ol start="5"><li>把下面的内容添加进去</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>net.core.default_qdisc=fq
net.ipv4.tcp_congestion_control=bbr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>重启 VPS、使内核更新和<code>BBR</code>设置都生效</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">reboot</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li>完整流程演示如下：</li></ol><div class="custom-container tip"><p class="custom-container-title">啰嗦君</p><p>因为我做展示的 VPS 支持云服务器专用内核，所以动图中我用了 <code>linux-image-cloud-amd64</code> 。如果你不确定你的 VPS 是否支持，那请务必按照第 3 步的命令，使用常规内核 <code>linux-image-amd64</code>。</p></div><p><img src="`+g+`" alt="更新Debian内核并开启"></p><ol start="8"><li>确认<code>BBR</code>开启</li></ol><p>如果你想确认 <code>BBR</code> 是否正确开启，可以使用下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>lsmod <span class="token operator">|</span> <span class="token function">grep</span> bbr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时应该返回这样的结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>tcp_bbr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想确认 <code>fq</code> 算法是否正确开启，可以使用下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>lsmod <span class="token operator">|</span> <span class="token function">grep</span> fq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时应该返回这样的结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sch_fq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_7-8-服务器优化之二-开启-http-自动跳转-https" tabindex="-1"><a class="header-anchor" href="#_7-8-服务器优化之二-开启-http-自动跳转-https"><span>7.8 服务器优化之二：开启 HTTP 自动跳转 HTTPS</span></a></h2><ol><li>之前我们已经搭建了 <code>80</code> 端口的 <code>http</code> 网页，并以此申请了 TLS 证书。</li></ol><p>但如果你尝试过用浏览器访问我们的这个界面，就会发现 <code>http</code> 访问并不会像大多数网站一样自动升级为 <code>https</code> 访问。换言之，我们现在的设置下，<code>http(80)</code> 和 <code>https(443)</code> 之间完全是独立的。如果要解决这个问题，就需要做一些修改。</p><ol start="2"><li>编辑 Nginx 的配置文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /etc/nginx/nginx.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>在我们设置过的 80 端口 Server 中加入下面的语句，并保存退出（可同时删除<code>root</code>和<code>index</code>两行）</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>return 301 https://$http_host$request_uri;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>在与 <code>80</code> 端口同级的位置增加一个本地端口监听来提供网页展示。本文以 <code>8080</code> 端口做演示。（可以是任意端口）</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>server {
   listen 127.0.0.1:8080;
   root /home/vpsadmin/www/webpage;
   index index.html;
   add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>重启 Nginx 服务</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>修改 Xray 的回落设置，将回落从 <code>80</code> 端口改为 <code>8080</code> 端口。（找到 <code>&quot;dest&quot;: 80</code>, 并改成 <code>&quot;dest&quot;: 8080</code>）</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /usr/local/etc/xray/config.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li>重启 <code>Xray</code> 服务，即完成了设置</li></ol><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart xray
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="8"><li>完整流程演示如下：</li></ol><p><img src="`+k+'" alt="http自动跳转https"></p><ol start="9"><li>当你输入 <code>http://a-name.yourdomain.com</code>的时候，它应该已经会自动跳转 https 了</li></ol><p><img src="'+y+'" alt="http自动跳转https生效"></p><h2 id="_7-9-服务器优化之三-更丰富的回落" tabindex="-1"><a class="header-anchor" href="#_7-9-服务器优化之三-更丰富的回落"><span>7.9 服务器优化之三：更丰富的回落</span></a></h2>',88),ss=a('<h2 id="_7-10-你的进度" tabindex="-1"><a class="header-anchor" href="#_7-10-你的进度"><span>7.10 你的进度</span></a></h2><p>恭喜！！到这一步，你已经拥有了可以正常科学上网的服务器、同时也有了可以防止主动探测攻击的伪装网站。接下来，只要给你的客户端装上合适的软件，就可以享受顺畅的网络了！</p><blockquote><p>⬛⬛⬛⬛⬛⬛⬛⬜ 87.5%</p></blockquote><h2 id="_7-11-重要勘误" tabindex="-1"><a class="header-anchor" href="#_7-11-重要勘误"><span>7.11 重要勘误</span></a></h2><ol><li>初版中<code>Xray</code>配置文件<code>config.json</code>文件夹位置错误。若你已经根据之前的位置进行了操作，<code>Xray</code>会无法正确启动。故勘误说明于此，请自查，造成不便十分抱歉！</li></ol><ul><li>正确位置：<code>/usr/local/etc/xray/config.json</code></li><li>错误位置：<code>/usr/local/etc/config.json</code></li></ul><p>受影响章节：</p><ul><li>7.4 配置<code>Xray</code> - 3. 使用<code>nano</code>创建<code>Xray</code>的配置文件</li><li>7.8 服务器优化之二 - 6. 修改<code>Xray</code>的回落设置</li></ul><ol start="2"><li>初版中修改<code>Nginx</code>配置文件<code>nginx.conf</code>时内容错误（网页文件夹位置错误），若你已经根据之前的位置进行了操作，<code>Nginx</code>会无法找到正确的网站。请自查，造成不便十分抱歉！</li></ol><ul><li>正确文件夹位置：<code>root /home/vpsadmin/www/webpage;</code></li><li>错误文件夹位置：<code>root /var/www/website/html</code></li></ul><p>受影响章节：</p><ul><li>7.8 服务器优化之二 - 4. 在与 <code>80</code> 端口同级的位置增加一个本地端口监听来提供网页展示</li></ul>',12);function ns(as,es){const l=o("I18nTip"),t=o("ExternalLinkIcon"),i=o("RouterLink");return d(),p("div",null,[e(l),q,s("p",null,[n("首先，Xray 的官方载体，就是 "),s("a",_,[n("xray-core"),e(t)]),n(" 开源项目（基于 "),f,n(" 开源协议）生成的二进制程序。你把这个二进制放在服务器运行，它就是服务器端；你把它下载到本地电脑运行，它就是客户端。主要区别来源于【配置】。")]),s("p",null,[n("安装时，直接使用官方安装脚本就很简单直接。它提供了多种安装选项，有兴趣的可以去官方的"),s("a",X,[n("安装脚本仓库"),e(t)]),n("中看看脚本的说明，"),B,n("。")]),w,s("p",null,[n("虽然我们前面已经申请好了 TLS 证书，但是按照 "),s("a",S,[L,n("的官方说明"),e(t)]),n("，申请后的证书不建议直接使用。正确的方法是使用 "),R,n(" 命令安装给需要的程序。我们现在就来把证书安装给 "),T,n(" 使用。")]),s("ol",null,[D,s("li",null,[E,s("ol",P,[I,s("li",null,[N,s("div",j,[V,s("p",null,[n("经大家提醒，"),U,n(" 有一个 "),C,n(" 命令，可以在证书更新时自动执行特定命令，那么就可以指定自动给 "),F,n(" 安装证书，但因为 "),A,n(" 是 Linux 系统中一个非常有用、非常常用的功能，所以本文保留 "),K,n(" 的方式来更新 "),H,n(" 证书。（对 "),M,n(" 感兴趣的同学可以查看 "),Z,n(" 的"),s("a",$,[n("官方文档"),e(t)]),n("）")]),z])]),G])])]),O,s("p",null,[n("首先，各种配置都可以参考"),s("a",Q,[n("官方 VLESS 配置示例"),e(t)]),n("。本文会基于官方示例，配置一个最精简的方式：【单 "),W,n(" 协议入站 + "),Y,n(" 端口回落】，满足大多数场景的最大速度及必要安全。")]),J,s("p",null,[n("如果你需要更丰富的回落功能，可以参考 "),e(i,{to:"/document/level-1/fallbacks-lv1/"},{default:r(()=>[n("《回落 (fallbacks) 功能简析》")]),_:1})]),ss])}const os=c(x,[["render",ns],["__file","ch07-xray-server.html.vue"]]);export{os as default};
