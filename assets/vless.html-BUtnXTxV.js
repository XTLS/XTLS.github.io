import{_ as i,r as t,o as u,c as r,a as e,b as n,d as s,w as a,e as l}from"./app-iCLZdFp1.js";const d={},k=n("h1",{id:"vless-xtls-vision-seed",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vless-xtls-vision-seed"},[n("span",null,"VLESS（XTLS Vision Seed）")])],-1),b=n("div",{class:"custom-container danger"},[n("p",{class:"custom-container-title"},"警告"),n("p",null,"目前 VLESS 没有自带加密，请用于可靠信道，如 TLS。")],-1),v=n("p",null,"VLESS 是一个无状态的轻量传输协议，它分为入站和出站两部分，可以作为 Xray 客户端和服务器之间的桥梁。",-1),q=l(`<h2 id="inboundconfigurationobject" tabindex="-1"><a class="header-anchor" href="#inboundconfigurationobject"><span>InboundConfigurationObject</span></a></h2><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;clients&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5783a3e7-e373-51cd-8642-c83782b807c5&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;love@xray.com&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;flow&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xtls-rprx-vision&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;decryption&quot;</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;fallbacks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;dest&quot;</span><span class="token operator">:</span> <span class="token number">80</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>clients</code>: [ <a href="#clientobject">ClientObject</a> ]</p></blockquote><p>一个数组，代表一组服务端认可的用户.</p><p>其中每一项是一个用户 <a href="#clientobject">ClientObject</a>。</p><blockquote><p><code>decryption</code>: &quot;none&quot;</p></blockquote><p>现阶段需要填 <code>&quot;none&quot;</code>，不能留空。 若未正确设置 decryption 的值，使用 Xray 或 -test 时会收到错误信息。</p><p>注意这里是 decryption，和 clients 同级。 decryption 和 vmess 协议的 encryption 的位置不同，是因为若套一层约定加密，服务端需要先解密才能知道是哪个用户。</p>`,8),m=n("code",null,"fallbacks",-1),_=l(`<h3 id="clientobject" tabindex="-1"><a class="header-anchor" href="#clientobject"><span>ClientObject</span></a></h3><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;5783a3e7-e373-51cd-8642-c83782b807c5&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;level&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;love@xray.com&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;flow&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xtls-rprx-vision&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>id</code>: string</p></blockquote><p>VLESS 的用户 ID，可以是任意小于 30 字节的字符串, 也可以是一个合法的 UUID. 自定义字符串和其映射的 UUID 是等价的, 这意味着你将可以这样在配置文件中写 id 来标识同一用户,即</p><ul><li>写 <code>&quot;id&quot;: &quot;我爱🍉老师1314&quot;</code>,</li><li>或写 <code>&quot;id&quot;: &quot;5783a3e7-e373-51cd-8642-c83782b807c5&quot;</code> (此 UUID 是 <code>我爱🍉老师1314</code> 的 UUID 映射)</li></ul>`,5),h={href:"https://github.com/XTLS/Xray-core/issues/158",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,[s("你可以使用命令 "),n("code",null,'xray uuid -i "自定义字符串"'),s(" 生成自定义字符串所映射的的 UUID。")],-1),y=n("blockquote",null,[n("p",null,[s("也可以使用命令 "),n("code",null,"xray uuid"),s(" 生成随机的 UUID.")])],-1),g=n("blockquote",null,[n("p",null,[n("code",null,"level"),s(": number")])],-1),x=n("code",null,"level",-1),j=l("<blockquote><p><code>email</code>: string</p></blockquote><p>用户邮箱，用于区分不同用户的流量（会体现在日志、统计中）。</p><blockquote><p><code>flow</code>: string</p></blockquote><p>流控模式，用于选择 XTLS 的算法。</p><p>目前入站协议中有以下流控模式可选：</p><ul><li>无 <code>flow</code> 或者 空字符： 使用普通 TLS 代理</li><li><code>xtls-rprx-vision</code>：使用新 XTLS 模式 包含内层握手随机填充</li></ul><p>此外，目前 XTLS 仅支持 TCP+TLS/Reality</p>",7);function S(L,U){const c=t("I18nTip"),o=t("RouterLink"),p=t("ExternalLinkIcon");return u(),r("div",null,[e(c),k,b,v,n("p",null,[s("与 "),e(o,{to:"/config/inbounds/vmess.html"},{default:a(()=>[s("VMess")]),_:1}),s(" 不同，VLESS 不依赖于系统时间，认证方式同样为 UUID。")]),q,n("blockquote",null,[n("p",null,[m,s(": [ "),e(o,{to:"/config/features/fallback.html"},{default:a(()=>[s("FallbackObject")]),_:1}),s(" ]")])]),n("p",null,[s("一个数组，包含一系列强大的回落分流配置（可选）。 fallbacks 的具体配置请点击 "),e(o,{to:"/config/features/fallback.html#fallbacks-%E9%85%8D%E7%BD%AE"},{default:a(()=>[s("FallbackObject")]),_:1})]),_,n("p",null,[s("其映射标准在 "),n("a",h,[s("VLESS UUID 映射标准：将自定义字符串映射为一个 UUIDv5"),e(p)])]),f,y,g,n("p",null,[s("用户等级，连接会使用这个用户等级对应的 "),e(o,{to:"/config/policy.html#levelpolicyobject"},{default:a(()=>[s("本地策略")]),_:1}),s("。")]),n("p",null,[s("level 的值, 对应 "),e(o,{to:"/config/policy.html#policyobject"},{default:a(()=>[s("policy")]),_:1}),s(" 中 "),x,s(" 的值。 如不指定, 默认为 0。")]),j])}const D=i(d,[["render",S],["__file","vless.html.vue"]]);export{D as default};
