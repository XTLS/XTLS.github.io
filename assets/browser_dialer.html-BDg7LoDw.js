import{_ as d,r as l,o as i,c as _,a as t,b as e,d as o,w as a,e as h}from"./app-iCLZdFp1.js";const u={},p=e("h1",{id:"browser-dialer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#browser-dialer"},[e("span",null,"Browser Dialer")])],-1),S=e("h2",{id:"背景",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#背景"},[e("span",null,"背景")])],-1),T=e("p",null,[o("通过 uTLS，Xray 可以模拟主流浏览器的 TLS 握手指纹（具体参见 TLS 中 "),e("code",null,"fingerprint"),o(" 选项）。但是仍然不能保证在任意时刻 uTLS 模拟浏览器行为完全一致。")],-1),b={href:"https://github.com/v2ray/discussion/issues/754#issuecomment-647934994",target:"_blank",rel:"noopener noreferrer"},f=e("code",null,"localhost:8080",-1),m=e("p",null,"这个方法简洁的实现了真实的浏览器的 TLS 指纹、行为特征。最大程度抗检测与抗封锁。",-1),R=e("p",null,"不过目前的浏览器转发有以下缺点：",-1),x=e("li",null,"用户需要手动开浏览器",-1),k=e("li",null,"浏览器发出的连接必须直连 使用 tun 的用户需要特别注意容易形成死循环",-1),g=e("code",null,"localhost:8080",-1),y={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"},L=e("li",null,"因为中间经过 JS 处理数据，会有一些性能损耗",-1),w=e("li",null,[o("不能使用自定义 SNI 或者 Host，也就是说 "),e("code",null,"SNI == host == address"),o("。自定义 HTTP 头以及其它 "),e("code",null,"tlsSettings"),o(" 项会被忽略")],-1),P=h('<h2 id="配置方法" tabindex="-1"><a class="header-anchor" href="#配置方法"><span>配置方法</span></a></h2><ol><li>准备一份 WebSocket 或 SplitHTTP 配置，注意 address 必须填域名，若需要指定 IP，请配置 DNS 或系统 hosts</li><li>使用环境变量启动 Xray <code>XRAY_BROWSER_DIALER=127.0.0.1:8080</code>。Windows 上命令为 <code>set XRAY_BROWSER_DIALER=127.0.0.1:8080</code> Linux 上命令为 <code>XRAY_BROWSER_DIALER=127.0.0.1:8080 ./xray -c config.json</code></li><li>确保浏览器直连（或者在路由中将服务端地址直接由 <code>freedom</code> 发出），打开页面 <code>localhost:8080</code>，还可以 <code>F12</code> 看 <code>Console</code> 和 <code>Network</code></li><li>浏览器会限制发出的连接数，所以建议开启 <code>Mux.Cool</code></li></ol><h2 id="内部通信机制" tabindex="-1"><a class="header-anchor" href="#内部通信机制"><span>内部通信机制</span></a></h2><ul><li>Xray 监听地址端口 <code>http://127.0.0.1:8080</code>，作为 HTTP 服务，浏览器访问地址，加载网页中的 JS。</li><li>JS 主动向 <code>http://127.0.0.1:8080</code> 建立 WebSocket 连接，成功后，Xray 将连接发给 channel。</li><li>需要建立连接时，Xray 从 channel 接收一个可用的连接，并发送目标 URL 和可选的 early data。</li><li>JS 成功连接到目标后告知 Xray，并继续用这个 conn 全双工双向转发数据，连接关闭行为同步。</li><li>连接使用后就会被关闭，但 JS 会确保始终有新空闲连接可用。</li></ul><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>WebSocket</span></a></h2>',5),X=e("p",null,"根据浏览器的需求，对 early data 机制进行了如下调整：",-1),H=e("li",null,[o("服务端响应头会带有请求的 "),e("code",null,"Sec-WebSocket-Protocol"),o("，这也初步混淆了 WSS 握手响应的长度特征。")],-1),I=e("li",null,[o("用于浏览器的 early data 编码是 "),e("code",null,"base64.RawURLEncoding"),o(" 而不是 "),e("code",null,"StdEncoding"),o("，服务端做了兼容。")],-1),E={href:"https://github.com/XTLS/Xray-core/pull/375",target:"_blank",rel:"noopener noreferrer"},W=e("code",null,"?ed=2048",-1),B=e("code",null,"MaxHeaderBytes",-1),C=e("s",null,"（虽然好像不改也没问题）",-1),N=e("h2",{id:"splithttp",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#splithttp"},[e("span",null,"SplitHTTP")])],-1),v=e("p",null,[o("SplitHTTP 本身支持 QUIC，如果想使用浏览器自己的 QUIC 网络栈，Chrome 可以在 "),e("code",null,"chrome://flags"),o(" 中设定。其它浏览器也有相关选项。")],-1),A=e("p",null,[o("原理上说 "),e("code",null,"tlsSettings"),o(" 项会被忽略，使用哪个 HTTP 版本将完全由浏览器决定。")],-1);function J(D,O){const r=l("I18nTip"),n=l("ExternalLinkIcon"),s=l("RouterLink"),c=l("Badge");return i(),_("div",null,[t(r),p,S,T,e("p",null,[o("对此 "),e("a",b,[o("浏览器转发（browser dialer）"),t(n)]),o("应运而生。用户在自己的浏览器中打开一个页面至 "),f,o("，这个页面利用原生 JS 充当 Xray 的网络栈，与代理服务端建立 TLS，HTTP 连接。")]),m,R,e("ul",null,[x,k,e("li",null,[o("浏览器只能发出 HTTP 连接 所以目前仅支持 "),t(s,{to:"/transports/websocket.html"},{default:a(()=>[o("WebSocket")]),_:1}),o(" 与 "),t(s,{to:"/transports/splithttp.html"},{default:a(()=>[o("SplitHTTP")]),_:1}),o(" 传输方式")]),e("li",null,[o("当浏览器从 "),g,o(" 页面连接至代理服务端，需要考虑 "),e("a",y,[o("CORS"),t(n)])]),L,w]),P,t(c,{text:"v1.4.1+",type:"warning"}),X,e("ul",null,[H,I,e("li",null,[o("此外，由于 "),e("a",E,[o("Xray-core#375"),t(n)]),o(" 推荐 "),W,o("，这个 PR 顺便将服务端一处 "),B,o(" 扩至了 4096。 "),C])]),N,t(c,{text:"v1.8.19+",type:"warning"}),v,A])}const V=d(u,[["render",J],["__file","browser_dialer.html.vue"]]);export{V as default};
