import{_ as e,r as s,o as a,c as t,a as o,e as i}from"./app-D7uBbsY3.js";const p={},c=i(`<h1 id="wireguard" tabindex="-1"><a class="header-anchor" href="#wireguard"><span>Wireguard</span></a></h1><p>User-space implementation of the Wireguard protocol.</p><div class="custom-container danger"><p class="custom-container-title">Предупреждение</p><p><strong>The Wireguard protocol is not specifically designed for circumvention purposes. If used as the outer layer for circumvention, its characteristics may lead to server blocking.</strong></p></div><h2 id="inboundconfigurationobject" tabindex="-1"><a class="header-anchor" href="#inboundconfigurationobject"><span>InboundConfigurationObject</span></a></h2><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;secretKey&quot;</span><span class="token operator">:</span> <span class="token string">&quot;PRIVATE_KEY&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;peers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;publicKey&quot;</span><span class="token operator">:</span> <span class="token string">&quot;PUBLIC_KEY&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;allowedIPs&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;kernelMode&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// optional, default true if it&#39;s supported and permission is sufficient</span>
  <span class="token property">&quot;mtu&quot;</span><span class="token operator">:</span> <span class="token number">1420</span><span class="token punctuation">,</span> <span class="token comment">// optional, default 1420</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>secretKey</code>: string</p></blockquote><p>Private key. Required.</p><blockquote><p><code>mtu</code>: int</p></blockquote><p>Fragmentation size of the underlying Wireguard tun.</p><details><summary>MTU Calculation Method</summary><p>The structure of a Wireguard packet is as follows:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>- 20-byte IPv4 header or 40 byte IPv6 header
- 8-byte UDP header
- 4-byte type
- 4-byte key index
- 8-byte nonce
- N-byte encrypted data
- 16-byte authentication tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>N-byte encrypted data</code> is the MTU value we need. Depending on whether the endpoint is IPv4 or IPv6, the specific values can be 1440 (IPv4) or 1420 (IPv6). If in a special environment, subtract additional bytes accordingly (e.g., subtract 8 more bytes for PPPoE over home broadband).</p></details><blockquote><p><code>peers</code>: [ <a href="#peers">Peers</a> ]</p></blockquote><p>List of peer servers, where each entry is a server configuration.</p><h3 id="peers" tabindex="-1"><a class="header-anchor" href="#peers"><span>Peers</span></a></h3><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;publicKey&quot;</span><span class="token operator">:</span> <span class="token string">&quot;PUBLIC_KEY&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;allowedIPs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;0.0.0.0/0&quot;</span><span class="token punctuation">]</span> <span class="token comment">// optional, default [&quot;0.0.0.0/0&quot;, &quot;::/0&quot;]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>publicKey</code>: string</p></blockquote><p>Public key, used for verification.</p><blockquote><p><code>allowedIPs</code>: string array</p></blockquote><p>Allowed source IPs.</p>`,18);function r(l,u){const n=s("I18nTip");return a(),t("div",null,[o(n),c])}const v=e(p,[["render",r],["__file","wireguard.html.vue"]]);export{v as default};
